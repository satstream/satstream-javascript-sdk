/*
 * Satstream API
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.64
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SatstreamApi);
  }
}(this, function(expect, SatstreamApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('GithubComSatstreamSsUtilsRpcBlock', function() {
      beforeEach(function() {
        instance = new SatstreamApi.GithubComSatstreamSsUtilsRpcBlock();
      });

      it('should create an instance of GithubComSatstreamSsUtilsRpcBlock', function() {
        // TODO: update the code to test GithubComSatstreamSsUtilsRpcBlock
        expect(instance).to.be.a(SatstreamApi.GithubComSatstreamSsUtilsRpcBlock);
      });

      it('should have the property bits (base name: "bits")', function() {
        // TODO: update the code to test the property bits
        expect(instance).to.have.property('bits');
        // expect(instance.bits).to.be(expectedValueLiteral);
      });

      it('should have the property chainwork (base name: "chainwork")', function() {
        // TODO: update the code to test the property chainwork
        expect(instance).to.have.property('chainwork');
        // expect(instance.chainwork).to.be(expectedValueLiteral);
      });

      it('should have the property confirmations (base name: "confirmations")', function() {
        // TODO: update the code to test the property confirmations
        expect(instance).to.have.property('confirmations');
        // expect(instance.confirmations).to.be(expectedValueLiteral);
      });

      it('should have the property difficulty (base name: "difficulty")', function() {
        // TODO: update the code to test the property difficulty
        expect(instance).to.have.property('difficulty');
        // expect(instance.difficulty).to.be(expectedValueLiteral);
      });

      it('should have the property hash (base name: "hash")', function() {
        // TODO: update the code to test the property hash
        expect(instance).to.have.property('hash');
        // expect(instance.hash).to.be(expectedValueLiteral);
      });

      it('should have the property height (base name: "height")', function() {
        // TODO: update the code to test the property height
        expect(instance).to.have.property('height');
        // expect(instance.height).to.be(expectedValueLiteral);
      });

      it('should have the property mediantime (base name: "mediantime")', function() {
        // TODO: update the code to test the property mediantime
        expect(instance).to.have.property('mediantime');
        // expect(instance.mediantime).to.be(expectedValueLiteral);
      });

      it('should have the property merkleroot (base name: "merkleroot")', function() {
        // TODO: update the code to test the property merkleroot
        expect(instance).to.have.property('merkleroot');
        // expect(instance.merkleroot).to.be(expectedValueLiteral);
      });

      it('should have the property nTx (base name: "nTx")', function() {
        // TODO: update the code to test the property nTx
        expect(instance).to.have.property('nTx');
        // expect(instance.nTx).to.be(expectedValueLiteral);
      });

      it('should have the property nonce (base name: "nonce")', function() {
        // TODO: update the code to test the property nonce
        expect(instance).to.have.property('nonce');
        // expect(instance.nonce).to.be(expectedValueLiteral);
      });

      it('should have the property previousblockhash (base name: "previousblockhash")', function() {
        // TODO: update the code to test the property previousblockhash
        expect(instance).to.have.property('previousblockhash');
        // expect(instance.previousblockhash).to.be(expectedValueLiteral);
      });

      it('should have the property size (base name: "size")', function() {
        // TODO: update the code to test the property size
        expect(instance).to.have.property('size');
        // expect(instance.size).to.be(expectedValueLiteral);
      });

      it('should have the property strippedSize (base name: "strippedSize")', function() {
        // TODO: update the code to test the property strippedSize
        expect(instance).to.have.property('strippedSize');
        // expect(instance.strippedSize).to.be(expectedValueLiteral);
      });

      it('should have the property time (base name: "time")', function() {
        // TODO: update the code to test the property time
        expect(instance).to.have.property('time');
        // expect(instance.time).to.be(expectedValueLiteral);
      });

      it('should have the property tx (base name: "tx")', function() {
        // TODO: update the code to test the property tx
        expect(instance).to.have.property('tx');
        // expect(instance.tx).to.be(expectedValueLiteral);
      });

      it('should have the property version (base name: "version")', function() {
        // TODO: update the code to test the property version
        expect(instance).to.have.property('version');
        // expect(instance.version).to.be(expectedValueLiteral);
      });

      it('should have the property versionHex (base name: "versionHex")', function() {
        // TODO: update the code to test the property versionHex
        expect(instance).to.have.property('versionHex');
        // expect(instance.versionHex).to.be(expectedValueLiteral);
      });

      it('should have the property weight (base name: "weight")', function() {
        // TODO: update the code to test the property weight
        expect(instance).to.have.property('weight');
        // expect(instance.weight).to.be(expectedValueLiteral);
      });

    });
  });

}));
