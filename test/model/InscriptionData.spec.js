/*
 * Satstream API
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.66
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SatstreamJavascriptSdk);
  }
}(this, function(expect, SatstreamJavascriptSdk) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('InscriptionData', function() {
      beforeEach(function() {
        instance = new SatstreamJavascriptSdk.InscriptionData();
      });

      it('should create an instance of InscriptionData', function() {
        // TODO: update the code to test InscriptionData
        expect(instance).to.be.a(SatstreamJavascriptSdk.InscriptionData);
      });

      it('should have the property body (base name: "body")', function() {
        // TODO: update the code to test the property body
        expect(instance).to.have.property('body');
        // expect(instance.body).to.be(expectedValueLiteral);
      });

      it('should have the property contentEncoding (base name: "content_encoding")', function() {
        // TODO: update the code to test the property contentEncoding
        expect(instance).to.have.property('contentEncoding');
        // expect(instance.contentEncoding).to.be(expectedValueLiteral);
      });

      it('should have the property contentType (base name: "content_type")', function() {
        // TODO: update the code to test the property contentType
        expect(instance).to.have.property('contentType');
        // expect(instance.contentType).to.be(expectedValueLiteral);
      });

      it('should have the property delegate (base name: "delegate")', function() {
        // TODO: update the code to test the property delegate
        expect(instance).to.have.property('delegate');
        // expect(instance.delegate).to.be(expectedValueLiteral);
      });

      it('should have the property duplicateField (base name: "duplicate_field")', function() {
        // TODO: update the code to test the property duplicateField
        expect(instance).to.have.property('duplicateField');
        // expect(instance.duplicateField).to.be(expectedValueLiteral);
      });

      it('should have the property incompleteField (base name: "incomplete_field")', function() {
        // TODO: update the code to test the property incompleteField
        expect(instance).to.have.property('incompleteField');
        // expect(instance.incompleteField).to.be(expectedValueLiteral);
      });

      it('should have the property metadata (base name: "metadata")', function() {
        // TODO: update the code to test the property metadata
        expect(instance).to.have.property('metadata');
        // expect(instance.metadata).to.be(expectedValueLiteral);
      });

      it('should have the property metaprotocol (base name: "metaprotocol")', function() {
        // TODO: update the code to test the property metaprotocol
        expect(instance).to.have.property('metaprotocol');
        // expect(instance.metaprotocol).to.be(expectedValueLiteral);
      });

      it('should have the property parents (base name: "parents")', function() {
        // TODO: update the code to test the property parents
        expect(instance).to.have.property('parents');
        // expect(instance.parents).to.be(expectedValueLiteral);
      });

      it('should have the property pointer (base name: "pointer")', function() {
        // TODO: update the code to test the property pointer
        expect(instance).to.have.property('pointer');
        // expect(instance.pointer).to.be(expectedValueLiteral);
      });

      it('should have the property rune (base name: "rune")', function() {
        // TODO: update the code to test the property rune
        expect(instance).to.have.property('rune');
        // expect(instance.rune).to.be(expectedValueLiteral);
      });

      it('should have the property unrecognizedEvenField (base name: "unrecognized_even_field")', function() {
        // TODO: update the code to test the property unrecognizedEvenField
        expect(instance).to.have.property('unrecognizedEvenField');
        // expect(instance.unrecognizedEvenField).to.be(expectedValueLiteral);
      });

    });
  });

}));
