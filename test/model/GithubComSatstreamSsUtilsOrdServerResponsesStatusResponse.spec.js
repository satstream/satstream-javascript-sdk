/*
 * Satstream API
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.64
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SatstreamJavascriptSdk);
  }
}(this, function(expect, SatstreamJavascriptSdk) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('GithubComSatstreamSsUtilsOrdServerResponsesStatusResponse', function() {
      beforeEach(function() {
        instance = new SatstreamJavascriptSdk.GithubComSatstreamSsUtilsOrdServerResponsesStatusResponse();
      });

      it('should create an instance of GithubComSatstreamSsUtilsOrdServerResponsesStatusResponse', function() {
        // TODO: update the code to test GithubComSatstreamSsUtilsOrdServerResponsesStatusResponse
        expect(instance).to.be.a(SatstreamJavascriptSdk.GithubComSatstreamSsUtilsOrdServerResponsesStatusResponse);
      });

      it('should have the property addressIndex (base name: "address_index")', function() {
        // TODO: update the code to test the property addressIndex
        expect(instance).to.have.property('addressIndex');
        // expect(instance.addressIndex).to.be(expectedValueLiteral);
      });

      it('should have the property blessedInscriptions (base name: "blessed_inscriptions")', function() {
        // TODO: update the code to test the property blessedInscriptions
        expect(instance).to.have.property('blessedInscriptions');
        // expect(instance.blessedInscriptions).to.be(expectedValueLiteral);
      });

      it('should have the property chain (base name: "chain")', function() {
        // TODO: update the code to test the property chain
        expect(instance).to.have.property('chain');
        // expect(instance.chain).to.be(expectedValueLiteral);
      });

      it('should have the property cursedInscriptions (base name: "cursed_inscriptions")', function() {
        // TODO: update the code to test the property cursedInscriptions
        expect(instance).to.have.property('cursedInscriptions');
        // expect(instance.cursedInscriptions).to.be(expectedValueLiteral);
      });

      it('should have the property height (base name: "height")', function() {
        // TODO: update the code to test the property height
        expect(instance).to.have.property('height');
        // expect(instance.height).to.be(expectedValueLiteral);
      });

      it('should have the property initialSyncTime (base name: "initial_sync_time")', function() {
        // TODO: update the code to test the property initialSyncTime
        expect(instance).to.have.property('initialSyncTime');
        // expect(instance.initialSyncTime).to.be(expectedValueLiteral);
      });

      it('should have the property inscriptions (base name: "inscriptions")', function() {
        // TODO: update the code to test the property inscriptions
        expect(instance).to.have.property('inscriptions');
        // expect(instance.inscriptions).to.be(expectedValueLiteral);
      });

      it('should have the property lostSats (base name: "lost_sats")', function() {
        // TODO: update the code to test the property lostSats
        expect(instance).to.have.property('lostSats');
        // expect(instance.lostSats).to.be(expectedValueLiteral);
      });

      it('should have the property minimumRuneForNextBlock (base name: "minimum_rune_for_next_block")', function() {
        // TODO: update the code to test the property minimumRuneForNextBlock
        expect(instance).to.have.property('minimumRuneForNextBlock');
        // expect(instance.minimumRuneForNextBlock).to.be(expectedValueLiteral);
      });

      it('should have the property runeIndex (base name: "rune_index")', function() {
        // TODO: update the code to test the property runeIndex
        expect(instance).to.have.property('runeIndex');
        // expect(instance.runeIndex).to.be(expectedValueLiteral);
      });

      it('should have the property runes (base name: "runes")', function() {
        // TODO: update the code to test the property runes
        expect(instance).to.have.property('runes');
        // expect(instance.runes).to.be(expectedValueLiteral);
      });

      it('should have the property satIndex (base name: "sat_index")', function() {
        // TODO: update the code to test the property satIndex
        expect(instance).to.have.property('satIndex');
        // expect(instance.satIndex).to.be(expectedValueLiteral);
      });

      it('should have the property started (base name: "started")', function() {
        // TODO: update the code to test the property started
        expect(instance).to.have.property('started');
        // expect(instance.started).to.be(expectedValueLiteral);
      });

      it('should have the property transactionIndex (base name: "transaction_index")', function() {
        // TODO: update the code to test the property transactionIndex
        expect(instance).to.have.property('transactionIndex');
        // expect(instance.transactionIndex).to.be(expectedValueLiteral);
      });

      it('should have the property unrecoverablyReorged (base name: "unrecoverably_reorged")', function() {
        // TODO: update the code to test the property unrecoverablyReorged
        expect(instance).to.have.property('unrecoverablyReorged');
        // expect(instance.unrecoverablyReorged).to.be(expectedValueLiteral);
      });

      it('should have the property uptime (base name: "uptime")', function() {
        // TODO: update the code to test the property uptime
        expect(instance).to.have.property('uptime');
        // expect(instance.uptime).to.be(expectedValueLiteral);
      });

    });
  });

}));
