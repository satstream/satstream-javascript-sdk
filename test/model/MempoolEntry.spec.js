/*
 * Satstream API
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.66
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SatstreamJavascriptSdk);
  }
}(this, function(expect, SatstreamJavascriptSdk) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('MempoolEntry', function() {
      beforeEach(function() {
        instance = new SatstreamJavascriptSdk.MempoolEntry();
      });

      it('should create an instance of MempoolEntry', function() {
        // TODO: update the code to test MempoolEntry
        expect(instance).to.be.a(SatstreamJavascriptSdk.MempoolEntry);
      });

      it('should have the property ancestorcount (base name: "ancestorcount")', function() {
        // TODO: update the code to test the property ancestorcount
        expect(instance).to.have.property('ancestorcount');
        // expect(instance.ancestorcount).to.be(expectedValueLiteral);
      });

      it('should have the property ancestorsize (base name: "ancestorsize")', function() {
        // TODO: update the code to test the property ancestorsize
        expect(instance).to.have.property('ancestorsize');
        // expect(instance.ancestorsize).to.be(expectedValueLiteral);
      });

      it('should have the property bip125Replaceable (base name: "bip125-replaceable")', function() {
        // TODO: update the code to test the property bip125Replaceable
        expect(instance).to.have.property('bip125Replaceable');
        // expect(instance.bip125Replaceable).to.be(expectedValueLiteral);
      });

      it('should have the property depends (base name: "depends")', function() {
        // TODO: update the code to test the property depends
        expect(instance).to.have.property('depends');
        // expect(instance.depends).to.be(expectedValueLiteral);
      });

      it('should have the property descendantcount (base name: "descendantcount")', function() {
        // TODO: update the code to test the property descendantcount
        expect(instance).to.have.property('descendantcount');
        // expect(instance.descendantcount).to.be(expectedValueLiteral);
      });

      it('should have the property descendantsize (base name: "descendantsize")', function() {
        // TODO: update the code to test the property descendantsize
        expect(instance).to.have.property('descendantsize');
        // expect(instance.descendantsize).to.be(expectedValueLiteral);
      });

      it('should have the property fees (base name: "fees")', function() {
        // TODO: update the code to test the property fees
        expect(instance).to.have.property('fees');
        // expect(instance.fees).to.be(expectedValueLiteral);
      });

      it('should have the property height (base name: "height")', function() {
        // TODO: update the code to test the property height
        expect(instance).to.have.property('height');
        // expect(instance.height).to.be(expectedValueLiteral);
      });

      it('should have the property spentby (base name: "spentby")', function() {
        // TODO: update the code to test the property spentby
        expect(instance).to.have.property('spentby');
        // expect(instance.spentby).to.be(expectedValueLiteral);
      });

      it('should have the property time (base name: "time")', function() {
        // TODO: update the code to test the property time
        expect(instance).to.have.property('time');
        // expect(instance.time).to.be(expectedValueLiteral);
      });

      it('should have the property unbroadcast (base name: "unbroadcast")', function() {
        // TODO: update the code to test the property unbroadcast
        expect(instance).to.have.property('unbroadcast');
        // expect(instance.unbroadcast).to.be(expectedValueLiteral);
      });

      it('should have the property vsize (base name: "vsize")', function() {
        // TODO: update the code to test the property vsize
        expect(instance).to.have.property('vsize');
        // expect(instance.vsize).to.be(expectedValueLiteral);
      });

      it('should have the property weight (base name: "weight")', function() {
        // TODO: update the code to test the property weight
        expect(instance).to.have.property('weight');
        // expect(instance.weight).to.be(expectedValueLiteral);
      });

      it('should have the property wtxid (base name: "wtxid")', function() {
        // TODO: update the code to test the property wtxid
        expect(instance).to.have.property('wtxid');
        // expect(instance.wtxid).to.be(expectedValueLiteral);
      });

    });
  });

}));
