/*
 * Satstream API
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.66
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SatstreamJavascriptSdk);
  }
}(this, function(expect, SatstreamJavascriptSdk) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('InscriptionResponse', function() {
      beforeEach(function() {
        instance = new SatstreamJavascriptSdk.InscriptionResponse();
      });

      it('should create an instance of InscriptionResponse', function() {
        // TODO: update the code to test InscriptionResponse
        expect(instance).to.be.a(SatstreamJavascriptSdk.InscriptionResponse);
      });

      it('should have the property address (base name: "address")', function() {
        // TODO: update the code to test the property address
        expect(instance).to.have.property('address');
        // expect(instance.address).to.be(expectedValueLiteral);
      });

      it('should have the property charms (base name: "charms")', function() {
        // TODO: update the code to test the property charms
        expect(instance).to.have.property('charms');
        // expect(instance.charms).to.be(expectedValueLiteral);
      });

      it('should have the property children (base name: "children")', function() {
        // TODO: update the code to test the property children
        expect(instance).to.have.property('children');
        // expect(instance.children).to.be(expectedValueLiteral);
      });

      it('should have the property contentLength (base name: "content_length")', function() {
        // TODO: update the code to test the property contentLength
        expect(instance).to.have.property('contentLength');
        // expect(instance.contentLength).to.be(expectedValueLiteral);
      });

      it('should have the property contentType (base name: "content_type")', function() {
        // TODO: update the code to test the property contentType
        expect(instance).to.have.property('contentType');
        // expect(instance.contentType).to.be(expectedValueLiteral);
      });

      it('should have the property effectiveContentType (base name: "effective_content_type")', function() {
        // TODO: update the code to test the property effectiveContentType
        expect(instance).to.have.property('effectiveContentType');
        // expect(instance.effectiveContentType).to.be(expectedValueLiteral);
      });

      it('should have the property fee (base name: "fee")', function() {
        // TODO: update the code to test the property fee
        expect(instance).to.have.property('fee');
        // expect(instance.fee).to.be(expectedValueLiteral);
      });

      it('should have the property height (base name: "height")', function() {
        // TODO: update the code to test the property height
        expect(instance).to.have.property('height');
        // expect(instance.height).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property next (base name: "next")', function() {
        // TODO: update the code to test the property next
        expect(instance).to.have.property('next');
        // expect(instance.next).to.be(expectedValueLiteral);
      });

      it('should have the property _number (base name: "number")', function() {
        // TODO: update the code to test the property _number
        expect(instance).to.have.property('_number');
        // expect(instance._number).to.be(expectedValueLiteral);
      });

      it('should have the property parents (base name: "parents")', function() {
        // TODO: update the code to test the property parents
        expect(instance).to.have.property('parents');
        // expect(instance.parents).to.be(expectedValueLiteral);
      });

      it('should have the property previous (base name: "previous")', function() {
        // TODO: update the code to test the property previous
        expect(instance).to.have.property('previous');
        // expect(instance.previous).to.be(expectedValueLiteral);
      });

      it('should have the property rune (base name: "rune")', function() {
        // TODO: update the code to test the property rune
        expect(instance).to.have.property('rune');
        // expect(instance.rune).to.be(expectedValueLiteral);
      });

      it('should have the property sat (base name: "sat")', function() {
        // TODO: update the code to test the property sat
        expect(instance).to.have.property('sat');
        // expect(instance.sat).to.be(expectedValueLiteral);
      });

      it('should have the property satpoint (base name: "satpoint")', function() {
        // TODO: update the code to test the property satpoint
        expect(instance).to.have.property('satpoint');
        // expect(instance.satpoint).to.be(expectedValueLiteral);
      });

      it('should have the property timestamp (base name: "timestamp")', function() {
        // TODO: update the code to test the property timestamp
        expect(instance).to.have.property('timestamp');
        // expect(instance.timestamp).to.be(expectedValueLiteral);
      });

      it('should have the property value (base name: "value")', function() {
        // TODO: update the code to test the property value
        expect(instance).to.have.property('value');
        // expect(instance.value).to.be(expectedValueLiteral);
      });

    });
  });

}));
