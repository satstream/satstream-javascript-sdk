/*
 * Satstream API
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.64
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SatstreamJavascriptSdk);
  }
}(this, function(expect, SatstreamJavascriptSdk) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('GithubComSatstreamSsUtilsBitcoinCliChainTxStats', function() {
      beforeEach(function() {
        instance = new SatstreamJavascriptSdk.GithubComSatstreamSsUtilsBitcoinCliChainTxStats();
      });

      it('should create an instance of GithubComSatstreamSsUtilsBitcoinCliChainTxStats', function() {
        // TODO: update the code to test GithubComSatstreamSsUtilsBitcoinCliChainTxStats
        expect(instance).to.be.a(SatstreamJavascriptSdk.GithubComSatstreamSsUtilsBitcoinCliChainTxStats);
      });

      it('should have the property time (base name: "time")', function() {
        // TODO: update the code to test the property time
        expect(instance).to.have.property('time');
        // expect(instance.time).to.be(expectedValueLiteral);
      });

      it('should have the property txcount (base name: "txcount")', function() {
        // TODO: update the code to test the property txcount
        expect(instance).to.have.property('txcount');
        // expect(instance.txcount).to.be(expectedValueLiteral);
      });

      it('should have the property txrate (base name: "txrate")', function() {
        // TODO: update the code to test the property txrate
        expect(instance).to.have.property('txrate');
        // expect(instance.txrate).to.be(expectedValueLiteral);
      });

      it('should have the property windowBlockCount (base name: "window_block_count")', function() {
        // TODO: update the code to test the property windowBlockCount
        expect(instance).to.have.property('windowBlockCount');
        // expect(instance.windowBlockCount).to.be(expectedValueLiteral);
      });

      it('should have the property windowFinalBlockHash (base name: "window_final_block_hash")', function() {
        // TODO: update the code to test the property windowFinalBlockHash
        expect(instance).to.have.property('windowFinalBlockHash');
        // expect(instance.windowFinalBlockHash).to.be(expectedValueLiteral);
      });

      it('should have the property windowFinalBlockHeight (base name: "window_final_block_height")', function() {
        // TODO: update the code to test the property windowFinalBlockHeight
        expect(instance).to.have.property('windowFinalBlockHeight');
        // expect(instance.windowFinalBlockHeight).to.be(expectedValueLiteral);
      });

      it('should have the property windowInterval (base name: "window_interval")', function() {
        // TODO: update the code to test the property windowInterval
        expect(instance).to.have.property('windowInterval');
        // expect(instance.windowInterval).to.be(expectedValueLiteral);
      });

      it('should have the property windowTxCount (base name: "window_tx_count")', function() {
        // TODO: update the code to test the property windowTxCount
        expect(instance).to.have.property('windowTxCount');
        // expect(instance.windowTxCount).to.be(expectedValueLiteral);
      });

    });
  });

}));
