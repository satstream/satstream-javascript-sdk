/*
 * Satstream API
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SatstreamJavascriptSdk);
  }
}(this, function(expect, SatstreamJavascriptSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SatstreamJavascriptSdk.InscriptionsApi();
  });

  describe('(package)', function() {
    describe('InscriptionsApi', function() {
      describe('fetchInscriptionChild', function() {
        it('should call fetchInscriptionChild successfully', function(done) {
          // TODO: uncomment, update parameter values for fetchInscriptionChild call and complete the assertions
          /*

          instance.fetchInscriptionChild(inscriptionId, childIndex, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SatstreamJavascriptSdk.GetInscriptionChildResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('fetchInscriptions', function() {
        it('should call fetchInscriptions successfully', function(done) {
          // TODO: uncomment, update parameter values for fetchInscriptions call and complete the assertions
          /*

          instance.fetchInscriptions(body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SatstreamJavascriptSdk.FetchInscriptionsResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBlockInscriptions', function() {
        it('should call getBlockInscriptions successfully', function(done) {
          // TODO: uncomment, update parameter values for getBlockInscriptions call and complete the assertions
          /*

          instance.getBlockInscriptions(blockHeight, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SatstreamJavascriptSdk.GetBlockInscriptionsResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getBlockInscriptionsPage', function() {
        it('should call getBlockInscriptionsPage successfully', function(done) {
          // TODO: uncomment, update parameter values for getBlockInscriptionsPage call and complete the assertions
          /*

          instance.getBlockInscriptionsPage(blockHeight, page, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SatstreamJavascriptSdk.GetBlockInscriptionsResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getInscription', function() {
        it('should call getInscription successfully', function(done) {
          // TODO: uncomment, update parameter values for getInscription call and complete the assertions
          /*

          instance.getInscription(inscriptionId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SatstreamJavascriptSdk.GetInscriptionResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLatestInscriptions', function() {
        it('should call getLatestInscriptions successfully', function(done) {
          // TODO: uncomment getLatestInscriptions call and complete the assertions
          /*

          instance.getLatestInscriptions(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SatstreamJavascriptSdk.GetLatestInscriptionsResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getLatestInscriptionsPage', function() {
        it('should call getLatestInscriptionsPage successfully', function(done) {
          // TODO: uncomment, update parameter values for getLatestInscriptionsPage call and complete the assertions
          /*

          instance.getLatestInscriptionsPage(page, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SatstreamJavascriptSdk.GetLatestInscriptionsResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
