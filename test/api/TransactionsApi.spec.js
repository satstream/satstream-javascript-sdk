/*
 * Satstream API
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SatstreamApi);
  }
}(this, function(expect, SatstreamApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SatstreamApi.TransactionsApi();
  });

  describe('(package)', function() {
    describe('TransactionsApi', function() {
      describe('broadcastTransaction', function() {
        it('should call broadcastTransaction successfully', function(done) {
          // TODO: uncomment, update parameter values for broadcastTransaction call and complete the assertions
          /*
          var transaction = "transaction_example";

          instance.broadcastTransaction(transaction, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SatstreamApi.InlineResponse20011);
            expect(data.data).to.be.a(SatstreamApi.ResponsesSendRawTransaction);
                  expect(data.data.txHash).to.be.a('string');
              expect(data.data.txHash).to.be("");
            expect(data.githubComSatstreamSsApiServerApiTransactionsResponsesBaseResponse).to.be.a(SatstreamApi.GithubComSatstreamSsApiServerApiTransactionsResponsesBaseResponse);
                  expect(data.githubComSatstreamSsApiServerApiTransactionsResponsesBaseResponse.code).to.be.a('number');
              expect(data.githubComSatstreamSsApiServerApiTransactionsResponsesBaseResponse.code).to.be(0);
              expect(data.githubComSatstreamSsApiServerApiTransactionsResponsesBaseResponse.data).to.be.a(Object);
              expect(data.githubComSatstreamSsApiServerApiTransactionsResponsesBaseResponse.data).to.be();
              expect(data.githubComSatstreamSsApiServerApiTransactionsResponsesBaseResponse.msg).to.be.a('string');
              expect(data.githubComSatstreamSsApiServerApiTransactionsResponsesBaseResponse.msg).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTransaction', function() {
        it('should call getTransaction successfully', function(done) {
          // TODO: uncomment, update parameter values for getTransaction call and complete the assertions
          /*
          var hash = "hash_example";

          instance.getTransaction(hash, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SatstreamApi.InlineResponse2008);
            expect(data.data).to.be.a(SatstreamApi.GithubComSatstreamSsUtilsRpcBtcTx);
                  expect(data.data.blockheight).to.be.a('number');
              expect(data.data.blockheight).to.be(0);
              expect(data.data.fee).to.be.a('number');
              expect(data.data.fee).to.be();
              expect(data.data.hash).to.be.a('string');
              expect(data.data.hash).to.be("");
              expect(data.data.hex).to.be.a('string');
              expect(data.data.hex).to.be("");
              expect(data.data.index).to.be.a('number');
              expect(data.data.index).to.be(0);
              expect(data.data.locktime).to.be.a('number');
              expect(data.data.locktime).to.be(0);
              expect(data.data.size).to.be.a('number');
              expect(data.data.size).to.be(0);
              expect(data.data.txid).to.be.a('string');
              expect(data.data.txid).to.be("");
              expect(data.data.version).to.be.a('number');
              expect(data.data.version).to.be(0);
              {
                let dataCtr = data.data.vin;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SatstreamApi.GithubComSatstreamSsUtilsRpcVin);
                  expect(data.coinbase).to.be.a('string');
                  expect(data.coinbase).to.be("");
                  expect(data.prevout).to.be.a(SatstreamApi.GithubComSatstreamSsUtilsRpcPrevOut);
                        expect(data.prevout.height).to.be.a('number');
                    expect(data.prevout.height).to.be(0);
                    expect(data.prevout.n).to.be.a('number');
                    expect(data.prevout.n).to.be(0);
                    expect(data.prevout.populated).to.be.a('boolean');
                    expect(data.prevout.populated).to.be(false);
                    {
                      let dataCtr = data.prevout.runeHoldings;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(SatstreamApi.GithubComSatstreamSsUtilsRpcUtxoRune);
                        expect(data.amount).to.be.a(SatstreamApi.BigInt);
                            expect(data.runeId).to.be.a('string');
                        expect(data.runeId).to.be("");
        
                              }
                    }
                    expect(data.prevout.scriptPubKey).to.be.a(SatstreamApi.GithubComSatstreamSsUtilsRpcScriptPubKey);
                          expect(data.prevout.scriptPubKey.address).to.be.a('string');
                      expect(data.prevout.scriptPubKey.address).to.be("");
                      expect(data.prevout.scriptPubKey.asm).to.be.a('string');
                      expect(data.prevout.scriptPubKey.asm).to.be("");
                      expect(data.prevout.scriptPubKey.desc).to.be.a('string');
                      expect(data.prevout.scriptPubKey.desc).to.be("");
                      expect(data.prevout.scriptPubKey.hex).to.be.a('string');
                      expect(data.prevout.scriptPubKey.hex).to.be("");
                      expect(data.prevout.scriptPubKey.type).to.be.a('string');
                      expect(data.prevout.scriptPubKey.type).to.be("");
                    expect(data.prevout.value).to.be.a('number');
                    expect(data.prevout.value).to.be();
                  expect(data.scriptSig).to.be.a(SatstreamApi.GithubComSatstreamSsUtilsRpcScriptSig);
                        expect(data.scriptSig.asm).to.be.a('string');
                    expect(data.scriptSig.asm).to.be("");
                    expect(data.scriptSig.hex).to.be.a('string');
                    expect(data.scriptSig.hex).to.be("");
                  expect(data.sequence).to.be.a('number');
                  expect(data.sequence).to.be(0);
                  expect(data.txid).to.be.a('string');
                  expect(data.txid).to.be("");
                  {
                    let dataCtr = data.txinwitness;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.vout).to.be.a('number');
                  expect(data.vout).to.be(0);
  
                        }
              }
              {
                let dataCtr = data.data.vout;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SatstreamApi.GithubComSatstreamSsUtilsRpcVout);
                  expect(data.n).to.be.a('number');
                  expect(data.n).to.be(0);
                  {
                    let dataCtr = data.runeHoldings;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SatstreamApi.GithubComSatstreamSsUtilsRpcUtxoRune);
                      expect(data.amount).to.be.a(SatstreamApi.BigInt);
                          expect(data.runeId).to.be.a('string');
                      expect(data.runeId).to.be("");
      
                            }
                  }
                  expect(data.scriptPubKey).to.be.a(SatstreamApi.GithubComSatstreamSsUtilsRpcScriptPubKey);
                        expect(data.scriptPubKey.address).to.be.a('string');
                    expect(data.scriptPubKey.address).to.be("");
                    expect(data.scriptPubKey.asm).to.be.a('string');
                    expect(data.scriptPubKey.asm).to.be("");
                    expect(data.scriptPubKey.desc).to.be.a('string');
                    expect(data.scriptPubKey.desc).to.be("");
                    expect(data.scriptPubKey.hex).to.be.a('string');
                    expect(data.scriptPubKey.hex).to.be("");
                    expect(data.scriptPubKey.type).to.be.a('string');
                    expect(data.scriptPubKey.type).to.be("");
                  expect(data.value).to.be.a('number');
                  expect(data.value).to.be();
  
                        }
              }
              expect(data.data.vsize).to.be.a('number');
              expect(data.data.vsize).to.be(0);
              expect(data.data.weight).to.be.a('number');
              expect(data.data.weight).to.be(0);
            expect(data.githubComSatstreamSsApiServerApiTransactionsResponsesBaseResponse).to.be.a(SatstreamApi.GithubComSatstreamSsApiServerApiTransactionsResponsesBaseResponse);
                  expect(data.githubComSatstreamSsApiServerApiTransactionsResponsesBaseResponse.code).to.be.a('number');
              expect(data.githubComSatstreamSsApiServerApiTransactionsResponsesBaseResponse.code).to.be(0);
              expect(data.githubComSatstreamSsApiServerApiTransactionsResponsesBaseResponse.data).to.be.a(Object);
              expect(data.githubComSatstreamSsApiServerApiTransactionsResponsesBaseResponse.data).to.be();
              expect(data.githubComSatstreamSsApiServerApiTransactionsResponsesBaseResponse.msg).to.be.a('string');
              expect(data.githubComSatstreamSsApiServerApiTransactionsResponsesBaseResponse.msg).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTransactionInfo', function() {
        it('should call getTransactionInfo successfully', function(done) {
          // TODO: uncomment, update parameter values for getTransactionInfo call and complete the assertions
          /*
          var txid = "txid_example";

          instance.getTransactionInfo(txid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SatstreamApi.InlineResponse20012);
            expect(data.data).to.be.a(SatstreamApi.ResponsesTxInfo);
                  expect(data.data.blkid).to.be.a('string');
              expect(data.data.blkid).to.be("");
              expect(data.data.height).to.be.a('number');
              expect(data.data.height).to.be(0);
              expect(data.data.idx).to.be.a('number');
              expect(data.data.idx).to.be(0);
              expect(data.data.inSatoshi).to.be.a(SatstreamApi.BigInt);
                  expect(data.data.locktime).to.be.a('number');
              expect(data.data.locktime).to.be(0);
              expect(data.data.nIn).to.be.a('number');
              expect(data.data.nIn).to.be(0);
              expect(data.data.nInInscription).to.be.a('number');
              expect(data.data.nInInscription).to.be(0);
              expect(data.data.nLostInscription).to.be.a('number');
              expect(data.data.nLostInscription).to.be(0);
              expect(data.data.nNewInscription).to.be.a('number');
              expect(data.data.nNewInscription).to.be(0);
              expect(data.data.nOut).to.be.a('number');
              expect(data.data.nOut).to.be(0);
              expect(data.data.nOutInscription).to.be.a('number');
              expect(data.data.nOutInscription).to.be(0);
              expect(data.data.outSatoshi).to.be.a(SatstreamApi.BigInt);
                  expect(data.data.size).to.be.a('number');
              expect(data.data.size).to.be(0);
              expect(data.data.txid).to.be.a('string');
              expect(data.data.txid).to.be("");
            expect(data.githubComSatstreamSsApiServerApiTransactionsResponsesBaseResponse).to.be.a(SatstreamApi.GithubComSatstreamSsApiServerApiTransactionsResponsesBaseResponse);
                  expect(data.githubComSatstreamSsApiServerApiTransactionsResponsesBaseResponse.code).to.be.a('number');
              expect(data.githubComSatstreamSsApiServerApiTransactionsResponsesBaseResponse.code).to.be(0);
              expect(data.githubComSatstreamSsApiServerApiTransactionsResponsesBaseResponse.data).to.be.a(Object);
              expect(data.githubComSatstreamSsApiServerApiTransactionsResponsesBaseResponse.data).to.be();
              expect(data.githubComSatstreamSsApiServerApiTransactionsResponsesBaseResponse.msg).to.be.a('string');
              expect(data.githubComSatstreamSsApiServerApiTransactionsResponsesBaseResponse.msg).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTransactionInputs', function() {
        it('should call getTransactionInputs successfully', function(done) {
          // TODO: uncomment, update parameter values for getTransactionInputs call and complete the assertions
          /*
          var txid = "txid_example";

          instance.getTransactionInputs(txid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
