/*
 * Satstream API
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SatstreamApi);
  }
}(this, function(expect, SatstreamApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SatstreamApi.BlocksApi();
  });

  describe('(package)', function() {
    describe('BlocksApi', function() {
      describe('blocksCurrentHeightGet', function() {
        it('should call blocksCurrentHeightGet successfully', function(done) {
          // TODO: uncomment blocksCurrentHeightGet call and complete the assertions
          /*

          instance.blocksCurrentHeightGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('number');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('blocksHashHashGet', function() {
        it('should call blocksHashHashGet successfully', function(done) {
          // TODO: uncomment, update parameter values for blocksHashHashGet call and complete the assertions
          /*
          var hash = "hash_example";

          instance.blocksHashHashGet(hash, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SatstreamApi.RpcBlock);
            expect(data.bits).to.be.a('string');
            expect(data.bits).to.be("");
            expect(data.chainwork).to.be.a('string');
            expect(data.chainwork).to.be("");
            expect(data.confirmations).to.be.a('number');
            expect(data.confirmations).to.be(0);
            expect(data.difficulty).to.be.a('number');
            expect(data.difficulty).to.be();
            expect(data.hash).to.be.a('string');
            expect(data.hash).to.be("");
            expect(data.height).to.be.a('number');
            expect(data.height).to.be(0);
            expect(data.mediantime).to.be.a('number');
            expect(data.mediantime).to.be(0);
            expect(data.merkleroot).to.be.a('string');
            expect(data.merkleroot).to.be("");
            expect(data.nTx).to.be.a('number');
            expect(data.nTx).to.be(0);
            expect(data.nonce).to.be.a('number');
            expect(data.nonce).to.be(0);
            expect(data.previousblockhash).to.be.a('string');
            expect(data.previousblockhash).to.be("");
            expect(data.size).to.be.a('number');
            expect(data.size).to.be(0);
            expect(data.strippedSize).to.be.a('number');
            expect(data.strippedSize).to.be(0);
            expect(data.time).to.be.a('number');
            expect(data.time).to.be(0);
            {
              let dataCtr = data.tx;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SatstreamApi.RpcBtcTx);
                expect(data.blockheight).to.be.a('number');
                expect(data.blockheight).to.be(0);
                expect(data.fee).to.be.a('number');
                expect(data.fee).to.be();
                expect(data.hash).to.be.a('string');
                expect(data.hash).to.be("");
                expect(data.hex).to.be.a('string');
                expect(data.hex).to.be("");
                expect(data.index).to.be.a('number');
                expect(data.index).to.be(0);
                expect(data.locktime).to.be.a('number');
                expect(data.locktime).to.be(0);
                expect(data.size).to.be.a('number');
                expect(data.size).to.be(0);
                expect(data.txid).to.be.a('string');
                expect(data.txid).to.be("");
                expect(data.version).to.be.a('number');
                expect(data.version).to.be(0);
                {
                  let dataCtr = data.vin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SatstreamApi.RpcVin);
                    expect(data.coinbase).to.be.a('string');
                    expect(data.coinbase).to.be("");
                    expect(data.prevout).to.be.a(SatstreamApi.RpcPrevOut);
                          expect(data.prevout.height).to.be.a('number');
                      expect(data.prevout.height).to.be(0);
                      expect(data.prevout.n).to.be.a('number');
                      expect(data.prevout.n).to.be(0);
                      expect(data.prevout.populated).to.be.a('boolean');
                      expect(data.prevout.populated).to.be(false);
                      {
                        let dataCtr = data.prevout.runeHoldings;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(SatstreamApi.RpcUtxoRune);
                          expect(data.amount).to.be.a(SatstreamApi.BigInt);
                              expect(data.runeId).to.be.a('string');
                          expect(data.runeId).to.be("");
          
                                }
                      }
                      expect(data.prevout.scriptPubKey).to.be.a(SatstreamApi.RpcScriptPubKey);
                            expect(data.prevout.scriptPubKey.address).to.be.a('string');
                        expect(data.prevout.scriptPubKey.address).to.be("");
                        expect(data.prevout.scriptPubKey.asm).to.be.a('string');
                        expect(data.prevout.scriptPubKey.asm).to.be("");
                        expect(data.prevout.scriptPubKey.desc).to.be.a('string');
                        expect(data.prevout.scriptPubKey.desc).to.be("");
                        expect(data.prevout.scriptPubKey.hex).to.be.a('string');
                        expect(data.prevout.scriptPubKey.hex).to.be("");
                        expect(data.prevout.scriptPubKey.type).to.be.a('string');
                        expect(data.prevout.scriptPubKey.type).to.be("");
                      expect(data.prevout.value).to.be.a('number');
                      expect(data.prevout.value).to.be();
                    expect(data.scriptSig).to.be.a(SatstreamApi.RpcScriptSig);
                          expect(data.scriptSig.asm).to.be.a('string');
                      expect(data.scriptSig.asm).to.be("");
                      expect(data.scriptSig.hex).to.be.a('string');
                      expect(data.scriptSig.hex).to.be("");
                    expect(data.sequence).to.be.a('number');
                    expect(data.sequence).to.be(0);
                    expect(data.txid).to.be.a('string');
                    expect(data.txid).to.be("");
                    {
                      let dataCtr = data.txinwitness;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.vout).to.be.a('number');
                    expect(data.vout).to.be(0);
    
                          }
                }
                {
                  let dataCtr = data.vout;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SatstreamApi.RpcVout);
                    expect(data.n).to.be.a('number');
                    expect(data.n).to.be(0);
                    {
                      let dataCtr = data.runeHoldings;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(SatstreamApi.RpcUtxoRune);
                        expect(data.amount).to.be.a(SatstreamApi.BigInt);
                            expect(data.runeId).to.be.a('string');
                        expect(data.runeId).to.be("");
        
                              }
                    }
                    expect(data.scriptPubKey).to.be.a(SatstreamApi.RpcScriptPubKey);
                          expect(data.scriptPubKey.address).to.be.a('string');
                      expect(data.scriptPubKey.address).to.be("");
                      expect(data.scriptPubKey.asm).to.be.a('string');
                      expect(data.scriptPubKey.asm).to.be("");
                      expect(data.scriptPubKey.desc).to.be.a('string');
                      expect(data.scriptPubKey.desc).to.be("");
                      expect(data.scriptPubKey.hex).to.be.a('string');
                      expect(data.scriptPubKey.hex).to.be("");
                      expect(data.scriptPubKey.type).to.be.a('string');
                      expect(data.scriptPubKey.type).to.be("");
                    expect(data.value).to.be.a('number');
                    expect(data.value).to.be();
    
                          }
                }
                expect(data.vsize).to.be.a('number');
                expect(data.vsize).to.be(0);
                expect(data.weight).to.be.a('number');
                expect(data.weight).to.be(0);

                      }
            }
            expect(data.version).to.be.a('number');
            expect(data.version).to.be(0);
            expect(data.versionHex).to.be.a('string');
            expect(data.versionHex).to.be("");
            expect(data.weight).to.be.a('number');
            expect(data.weight).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('blocksHeightGet', function() {
        it('should call blocksHeightGet successfully', function(done) {
          // TODO: uncomment, update parameter values for blocksHeightGet call and complete the assertions
          /*
          var height = 56;

          instance.blocksHeightGet(height, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SatstreamApi.RpcBlock);
            expect(data.bits).to.be.a('string');
            expect(data.bits).to.be("");
            expect(data.chainwork).to.be.a('string');
            expect(data.chainwork).to.be("");
            expect(data.confirmations).to.be.a('number');
            expect(data.confirmations).to.be(0);
            expect(data.difficulty).to.be.a('number');
            expect(data.difficulty).to.be();
            expect(data.hash).to.be.a('string');
            expect(data.hash).to.be("");
            expect(data.height).to.be.a('number');
            expect(data.height).to.be(0);
            expect(data.mediantime).to.be.a('number');
            expect(data.mediantime).to.be(0);
            expect(data.merkleroot).to.be.a('string');
            expect(data.merkleroot).to.be("");
            expect(data.nTx).to.be.a('number');
            expect(data.nTx).to.be(0);
            expect(data.nonce).to.be.a('number');
            expect(data.nonce).to.be(0);
            expect(data.previousblockhash).to.be.a('string');
            expect(data.previousblockhash).to.be("");
            expect(data.size).to.be.a('number');
            expect(data.size).to.be(0);
            expect(data.strippedSize).to.be.a('number');
            expect(data.strippedSize).to.be(0);
            expect(data.time).to.be.a('number');
            expect(data.time).to.be(0);
            {
              let dataCtr = data.tx;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SatstreamApi.RpcBtcTx);
                expect(data.blockheight).to.be.a('number');
                expect(data.blockheight).to.be(0);
                expect(data.fee).to.be.a('number');
                expect(data.fee).to.be();
                expect(data.hash).to.be.a('string');
                expect(data.hash).to.be("");
                expect(data.hex).to.be.a('string');
                expect(data.hex).to.be("");
                expect(data.index).to.be.a('number');
                expect(data.index).to.be(0);
                expect(data.locktime).to.be.a('number');
                expect(data.locktime).to.be(0);
                expect(data.size).to.be.a('number');
                expect(data.size).to.be(0);
                expect(data.txid).to.be.a('string');
                expect(data.txid).to.be("");
                expect(data.version).to.be.a('number');
                expect(data.version).to.be(0);
                {
                  let dataCtr = data.vin;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SatstreamApi.RpcVin);
                    expect(data.coinbase).to.be.a('string');
                    expect(data.coinbase).to.be("");
                    expect(data.prevout).to.be.a(SatstreamApi.RpcPrevOut);
                          expect(data.prevout.height).to.be.a('number');
                      expect(data.prevout.height).to.be(0);
                      expect(data.prevout.n).to.be.a('number');
                      expect(data.prevout.n).to.be(0);
                      expect(data.prevout.populated).to.be.a('boolean');
                      expect(data.prevout.populated).to.be(false);
                      {
                        let dataCtr = data.prevout.runeHoldings;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(SatstreamApi.RpcUtxoRune);
                          expect(data.amount).to.be.a(SatstreamApi.BigInt);
                              expect(data.runeId).to.be.a('string');
                          expect(data.runeId).to.be("");
          
                                }
                      }
                      expect(data.prevout.scriptPubKey).to.be.a(SatstreamApi.RpcScriptPubKey);
                            expect(data.prevout.scriptPubKey.address).to.be.a('string');
                        expect(data.prevout.scriptPubKey.address).to.be("");
                        expect(data.prevout.scriptPubKey.asm).to.be.a('string');
                        expect(data.prevout.scriptPubKey.asm).to.be("");
                        expect(data.prevout.scriptPubKey.desc).to.be.a('string');
                        expect(data.prevout.scriptPubKey.desc).to.be("");
                        expect(data.prevout.scriptPubKey.hex).to.be.a('string');
                        expect(data.prevout.scriptPubKey.hex).to.be("");
                        expect(data.prevout.scriptPubKey.type).to.be.a('string');
                        expect(data.prevout.scriptPubKey.type).to.be("");
                      expect(data.prevout.value).to.be.a('number');
                      expect(data.prevout.value).to.be();
                    expect(data.scriptSig).to.be.a(SatstreamApi.RpcScriptSig);
                          expect(data.scriptSig.asm).to.be.a('string');
                      expect(data.scriptSig.asm).to.be("");
                      expect(data.scriptSig.hex).to.be.a('string');
                      expect(data.scriptSig.hex).to.be("");
                    expect(data.sequence).to.be.a('number');
                    expect(data.sequence).to.be(0);
                    expect(data.txid).to.be.a('string');
                    expect(data.txid).to.be("");
                    {
                      let dataCtr = data.txinwitness;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.vout).to.be.a('number');
                    expect(data.vout).to.be(0);
    
                          }
                }
                {
                  let dataCtr = data.vout;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SatstreamApi.RpcVout);
                    expect(data.n).to.be.a('number');
                    expect(data.n).to.be(0);
                    {
                      let dataCtr = data.runeHoldings;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(SatstreamApi.RpcUtxoRune);
                        expect(data.amount).to.be.a(SatstreamApi.BigInt);
                            expect(data.runeId).to.be.a('string');
                        expect(data.runeId).to.be("");
        
                              }
                    }
                    expect(data.scriptPubKey).to.be.a(SatstreamApi.RpcScriptPubKey);
                          expect(data.scriptPubKey.address).to.be.a('string');
                      expect(data.scriptPubKey.address).to.be("");
                      expect(data.scriptPubKey.asm).to.be.a('string');
                      expect(data.scriptPubKey.asm).to.be("");
                      expect(data.scriptPubKey.desc).to.be.a('string');
                      expect(data.scriptPubKey.desc).to.be("");
                      expect(data.scriptPubKey.hex).to.be.a('string');
                      expect(data.scriptPubKey.hex).to.be("");
                      expect(data.scriptPubKey.type).to.be.a('string');
                      expect(data.scriptPubKey.type).to.be("");
                    expect(data.value).to.be.a('number');
                    expect(data.value).to.be();
    
                          }
                }
                expect(data.vsize).to.be.a('number');
                expect(data.vsize).to.be(0);
                expect(data.weight).to.be.a('number');
                expect(data.weight).to.be(0);

                      }
            }
            expect(data.version).to.be.a('number');
            expect(data.version).to.be(0);
            expect(data.versionHex).to.be.a('string');
            expect(data.versionHex).to.be("");
            expect(data.weight).to.be.a('number');
            expect(data.weight).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('blocksHeightTransactionsGet', function() {
        it('should call blocksHeightTransactionsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for blocksHeightTransactionsGet call and complete the assertions
          /*
          var height = 56;

          instance.blocksHeightTransactionsGet(height, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SatstreamApi.StoreTransactionDocument);
              expect(data.address).to.be.a('string');
              expect(data.address).to.be("1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2");
              expect(data.blockheight).to.be.a('number');
              expect(data.blockheight).to.be(100);
              expect(data.fee).to.be.a('number');
              expect(data.fee).to.be(0.001);
              expect(data.hash).to.be.a('string');
              expect(data.hash).to.be("0000000000000000000000000000000000000000000000000000000000000000");
              expect(data.hex).to.be.a('string');
              expect(data.hex).to.be("0000000000000000000000000000000000000000000000000000000000000000");
              expect(data.index).to.be.a('number');
              expect(data.index).to.be(0);
              expect(data.locktime).to.be.a('number');
              expect(data.locktime).to.be(0);
              expect(data.size).to.be.a('number');
              expect(data.size).to.be(100);
              expect(data.txid).to.be.a('string');
              expect(data.txid).to.be("8631dedfc6c46e6f923cd30e7e71cff541f205887b5cde7d0e1119121e3c563f");
              expect(data.version).to.be.a('number');
              expect(data.version).to.be(1);
              expect(data.vsize).to.be.a('number');
              expect(data.vsize).to.be(100);
              expect(data.weight).to.be.a('number');
              expect(data.weight).to.be(100);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
