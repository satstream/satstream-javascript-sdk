/*
 * Satstream API
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.64
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import GithubComSatstreamSsApiServerApiRunesResponsesError from '../model/GithubComSatstreamSsApiServerApiRunesResponsesError';
import ResponsesGetRuneHolders from '../model/ResponsesGetRuneHolders';
import ResponsesGetRuneInfo from '../model/ResponsesGetRuneInfo';
import ResponsesGetRunesInfoList from '../model/ResponsesGetRunesInfoList';

/**
* Runes service.
* @module api/RunesApi
* @version 1.0.15
*/
export default class RunesApi {

    /**
    * Constructs a new RunesApi. 
    * @alias module:api/RunesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getRunesHolders operation.
     * @callback moduleapi/RunesApi~getRunesHoldersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesGetRuneHolders{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get rune holders
     * Get a list of addresses holding a specific rune
     * @param {String} runeId Rune ID
     * @param {module:api/RunesApi~getRunesHoldersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getRunesHolders(runeId, callback) {
      
      let postBody = null;
      // verify the required parameter 'runeId' is set
      if (runeId === undefined || runeId === null) {
        throw new Error("Missing the required parameter 'runeId' when calling getRunesHolders");
      }

      let pathParams = {
        'runeId': runeId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponsesGetRuneHolders;

      return this.apiClient.callApi(
        '/runes/{runeId}/holders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getRunesInfo operation.
     * @callback moduleapi/RunesApi~getRunesInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesGetRuneInfo{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get rune info
     * Get detailed information about a specific rune
     * @param {String} runeId Rune ID
     * @param {module:api/RunesApi~getRunesInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getRunesInfo(runeId, callback) {
      
      let postBody = null;
      // verify the required parameter 'runeId' is set
      if (runeId === undefined || runeId === null) {
        throw new Error("Missing the required parameter 'runeId' when calling getRunesInfo");
      }

      let pathParams = {
        'runeId': runeId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponsesGetRuneInfo;

      return this.apiClient.callApi(
        '/runes/{runeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getRunesInfoList operation.
     * @callback moduleapi/RunesApi~getRunesInfoListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesGetRunesInfoList{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get runes info list
     * Get information about all runes
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page number (default: 1)
     * @param {Number} opts.perPage Items per page (default: 10)
     * @param {module:api/RunesApi~getRunesInfoListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getRunesInfoList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'page': opts['page'],'per_page': opts['perPage']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponsesGetRunesInfoList;

      return this.apiClient.callApi(
        '/runes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}