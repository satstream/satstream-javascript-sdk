/*
 * Satstream API
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.68
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import GetAddressBalanceResponse from '../model/GetAddressBalanceResponse';
import GetAddressDeltasResponse from '../model/GetAddressDeltasResponse';
import GetAddressResponse from '../model/GetAddressResponse';
import GetAddressRuneDeltasResponse from '../model/GetAddressRuneDeltasResponse';
import GetAddressUTXOsResponse from '../model/GetAddressUTXOsResponse';
import UtilsResponseEnvelope from '../model/UtilsResponseEnvelope';
import ValidateAddressResponse from '../model/ValidateAddressResponse';

/**
* Addresses service.
* @module api/AddressesApi
* @version 1.0.55
*/
export default class AddressesApi {

    /**
    * Constructs a new AddressesApi. 
    * @alias module:api/AddressesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getAddress operation.
     * @callback moduleapi/AddressesApi~getAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAddressResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get address info
     * Get detailed information about a specific address
     * @param {String} address Address
     * @param {module:api/AddressesApi~getAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAddress(address, callback) {
      
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling getAddress");
      }

      let pathParams = {
        'address': address
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAddressResponse;

      return this.apiClient.callApi(
        '/address/{address}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAddressBalance operation.
     * @callback moduleapi/AddressesApi~getAddressBalanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAddressBalanceResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get address balance
     * Get the total BTC balance in satoshis of an address by summing all its deltas
     * @param {String} address Address
     * @param {module:api/AddressesApi~getAddressBalanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAddressBalance(address, callback) {
      
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling getAddressBalance");
      }

      let pathParams = {
        'address': address
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAddressBalanceResponse;

      return this.apiClient.callApi(
        '/address/{address}/balance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAddressDeltas operation.
     * @callback moduleapi/AddressesApi~getAddressDeltasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAddressDeltasResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get address deltas
     * Get deltas for a specific address with pagination
     * @param {String} address Address
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize Number of results per page (default: 100, max: 1000)
     * @param {Number} opts.startHeight Start block height
     * @param {Number} opts.endHeight End block height
     * @param {String} opts.cursor Base64 encoded cursor for pagination
     * @param {module:api/AddressesApi~getAddressDeltasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAddressDeltas(address, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling getAddressDeltas");
      }

      let pathParams = {
        'address': address
      };
      let queryParams = {
        'page_size': opts['pageSize'],'start_height': opts['startHeight'],'end_height': opts['endHeight'],'cursor': opts['cursor']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAddressDeltasResponse;

      return this.apiClient.callApi(
        '/address/{address}/deltas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAddressRuneDeltas operation.
     * @callback moduleapi/AddressesApi~getAddressRuneDeltasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAddressRuneDeltasResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get address rune deltas
     * Get rune deltas for a specific address with pagination
     * @param {String} address Address
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageSize Number of results per page (default: 100, max: 1000)
     * @param {Number} opts.startHeight Start block height
     * @param {Number} opts.endHeight End block height
     * @param {String} opts.cursor Cursor for pagination
     * @param {module:api/AddressesApi~getAddressRuneDeltasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAddressRuneDeltas(address, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling getAddressRuneDeltas");
      }

      let pathParams = {
        'address': address
      };
      let queryParams = {
        'page_size': opts['pageSize'],'start_height': opts['startHeight'],'end_height': opts['endHeight'],'cursor': opts['cursor']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAddressRuneDeltasResponse;

      return this.apiClient.callApi(
        '/address/{address}/deltas/runes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAddressUtxos operation.
     * @callback moduleapi/AddressesApi~getAddressUtxosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAddressUTXOsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get UTXOs for an address
     * Retrieve UTXOs held by a specific address with optional type filtering
     * @param {String} address Address
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.type UTXO Type
     * @param {module:api/AddressesApi~getAddressUtxosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAddressUtxos(address, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling getAddressUtxos");
      }

      let pathParams = {
        'address': address
      };
      let queryParams = {
        'type': opts['type']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAddressUTXOsResponse;

      return this.apiClient.callApi(
        '/address/{address}/outputs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the validateAddress operation.
     * @callback moduleapi/AddressesApi~validateAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ValidateAddressResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate address
     * Returns information about the given Bitcoin address
     * @param {String} address Bitcoin address to validate
     * @param {module:api/AddressesApi~validateAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    validateAddress(address, callback) {
      
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling validateAddress");
      }

      let pathParams = {
        'address': address
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ValidateAddressResponse;

      return this.apiClient.callApi(
        '/address/{address}/validate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}