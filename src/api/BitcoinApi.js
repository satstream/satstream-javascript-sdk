/*
 * Satstream API
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.64
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import GithubComSatstreamSsApiServerApiAddressResponsesError from '../model/GithubComSatstreamSsApiServerApiAddressResponsesError';
import GithubComSatstreamSsApiServerApiBlockResponsesError from '../model/GithubComSatstreamSsApiServerApiBlockResponsesError';
import GithubComSatstreamSsApiServerApiFeeResponsesError from '../model/GithubComSatstreamSsApiServerApiFeeResponsesError';
import GithubComSatstreamSsApiServerApiMempoolResponsesError from '../model/GithubComSatstreamSsApiServerApiMempoolResponsesError';
import GithubComSatstreamSsApiServerApiMiningResponsesError from '../model/GithubComSatstreamSsApiServerApiMiningResponsesError';
import GithubComSatstreamSsApiServerApiNetworkResponsesError from '../model/GithubComSatstreamSsApiServerApiNetworkResponsesError';
import GithubComSatstreamSsApiServerApiPsbtRequestsCreatePSBTRequest from '../model/GithubComSatstreamSsApiServerApiPsbtRequestsCreatePSBTRequest';
import GithubComSatstreamSsApiServerApiPsbtResponsesError from '../model/GithubComSatstreamSsApiServerApiPsbtResponsesError';
import GithubComSatstreamSsApiServerApiScriptResponsesError from '../model/GithubComSatstreamSsApiServerApiScriptResponsesError';
import GithubComSatstreamSsApiServerApiTransactionRequestsCreatePSBTRequest from '../model/GithubComSatstreamSsApiServerApiTransactionRequestsCreatePSBTRequest';
import GithubComSatstreamSsApiServerApiTransactionResponsesError from '../model/GithubComSatstreamSsApiServerApiTransactionResponsesError';
import RequestsAnalyzePSBTRequest from '../model/RequestsAnalyzePSBTRequest';
import RequestsCombinePSBTRequest from '../model/RequestsCombinePSBTRequest';
import RequestsCombineRawTransactionRequest from '../model/RequestsCombineRawTransactionRequest';
import RequestsConvertToPSBTRequest from '../model/RequestsConvertToPSBTRequest';
import RequestsDecodeScriptRequest from '../model/RequestsDecodeScriptRequest';
import RequestsEstimateRawFeeRequest from '../model/RequestsEstimateRawFeeRequest';
import RequestsEstimateSmartFeeRequest from '../model/RequestsEstimateSmartFeeRequest';
import RequestsGetBlockStatsRequest from '../model/RequestsGetBlockStatsRequest';
import RequestsGetChainTxStatsRequest from '../model/RequestsGetChainTxStatsRequest';
import RequestsGetMempoolAncestorsRequest from '../model/RequestsGetMempoolAncestorsRequest';
import RequestsGetMempoolDescendantsRequest from '../model/RequestsGetMempoolDescendantsRequest';
import RequestsGetNetworkHashPSRequest from '../model/RequestsGetNetworkHashPSRequest';
import RequestsGetRawMempoolRequest from '../model/RequestsGetRawMempoolRequest';
import RequestsGetTxOutProofRequest from '../model/RequestsGetTxOutProofRequest';
import RequestsGetTxOutRequest from '../model/RequestsGetTxOutRequest';
import RequestsGetTxOutSetInfoRequest from '../model/RequestsGetTxOutSetInfoRequest';
import RequestsGetTxSpendingPrevoutRequest from '../model/RequestsGetTxSpendingPrevoutRequest';
import RequestsJoinPSBTsRequest from '../model/RequestsJoinPSBTsRequest';
import RequestsSendRawTransactionRequest from '../model/RequestsSendRawTransactionRequest';
import RequestsTestMempoolAcceptRequest from '../model/RequestsTestMempoolAcceptRequest';
import RequestsVerifyMessageRequest from '../model/RequestsVerifyMessageRequest';
import RequestsVerifyTxOutProofRequest from '../model/RequestsVerifyTxOutProofRequest';
import ResponsesAnalyzePSBTResponse from '../model/ResponsesAnalyzePSBTResponse';
import ResponsesCombinePSBTResponse from '../model/ResponsesCombinePSBTResponse';
import ResponsesCombineRawTransactionResponse from '../model/ResponsesCombineRawTransactionResponse';
import ResponsesConvertToPSBTResponse from '../model/ResponsesConvertToPSBTResponse';
import ResponsesCreatePSBTResponse from '../model/ResponsesCreatePSBTResponse';
import ResponsesCreateRawTransactionResponse from '../model/ResponsesCreateRawTransactionResponse';
import ResponsesDecodePSBTResponse from '../model/ResponsesDecodePSBTResponse';
import ResponsesDecodeScriptResponse from '../model/ResponsesDecodeScriptResponse';
import ResponsesEstimateRawFeeResponse from '../model/ResponsesEstimateRawFeeResponse';
import ResponsesEstimateSmartFeeResponse from '../model/ResponsesEstimateSmartFeeResponse';
import ResponsesGetBlockDecodedResponse from '../model/ResponsesGetBlockDecodedResponse';
import ResponsesGetBlockHexResponse from '../model/ResponsesGetBlockHexResponse';
import ResponsesGetBlockPrevoutResponse from '../model/ResponsesGetBlockPrevoutResponse';
import ResponsesGetBlockStatsResponse from '../model/ResponsesGetBlockStatsResponse';
import ResponsesGetBlockSummaryResponse from '../model/ResponsesGetBlockSummaryResponse';
import ResponsesGetBlockchainInfoResponse from '../model/ResponsesGetBlockchainInfoResponse';
import ResponsesGetChainTxStatsResponse from '../model/ResponsesGetChainTxStatsResponse';
import ResponsesGetDifficultyResponse from '../model/ResponsesGetDifficultyResponse';
import ResponsesGetMempoolAncestorsResponse from '../model/ResponsesGetMempoolAncestorsResponse';
import ResponsesGetMempoolDescendantsResponse from '../model/ResponsesGetMempoolDescendantsResponse';
import ResponsesGetMempoolInfoResponse from '../model/ResponsesGetMempoolInfoResponse';
import ResponsesGetMiningInfoResponse from '../model/ResponsesGetMiningInfoResponse';
import ResponsesGetNetworkHashPSResponse from '../model/ResponsesGetNetworkHashPSResponse';
import ResponsesGetRawMempoolResponse from '../model/ResponsesGetRawMempoolResponse';
import ResponsesGetRawTransactionDecodedResponse from '../model/ResponsesGetRawTransactionDecodedResponse';
import ResponsesGetRawTransactionHexResponse from '../model/ResponsesGetRawTransactionHexResponse';
import ResponsesGetRawTransactionPrevoutResponse from '../model/ResponsesGetRawTransactionPrevoutResponse';
import ResponsesGetTxOutProofResponse from '../model/ResponsesGetTxOutProofResponse';
import ResponsesGetTxOutResponse from '../model/ResponsesGetTxOutResponse';
import ResponsesGetTxOutSetInfoResponse from '../model/ResponsesGetTxOutSetInfoResponse';
import ResponsesGetTxSpendingPrevoutResponse from '../model/ResponsesGetTxSpendingPrevoutResponse';
import ResponsesJoinPSBTsResponse from '../model/ResponsesJoinPSBTsResponse';
import ResponsesSendRawTransactionResponse from '../model/ResponsesSendRawTransactionResponse';
import ResponsesTestMempoolAcceptResponse from '../model/ResponsesTestMempoolAcceptResponse';
import ResponsesValidateAddressResponse from '../model/ResponsesValidateAddressResponse';
import ResponsesVerifyMessageResponse from '../model/ResponsesVerifyMessageResponse';
import ResponsesVerifyTxOutProofResponse from '../model/ResponsesVerifyTxOutProofResponse';

/**
* Bitcoin service.
* @module api/BitcoinApi
* @version 1.0.19
*/
export default class BitcoinApi {

    /**
    * Constructs a new BitcoinApi. 
    * @alias module:api/BitcoinApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the analyzePsbt operation.
     * @callback moduleapi/BitcoinApi~analyzePsbtCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesAnalyzePSBTResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Analyze PSBT
     * Analyzes and provides information about the current status of a PSBT and its inputs
     * @param {module:model/RequestsAnalyzePSBTRequest} body PSBT to analyze
     * @param {module:api/BitcoinApi~analyzePsbtCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    analyzePsbt(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling analyzePsbt");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponsesAnalyzePSBTResponse;

      return this.apiClient.callApi(
        '/psbt/analyze', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the combinePsbt operation.
     * @callback moduleapi/BitcoinApi~combinePsbtCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesCombinePSBTResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Combine PSBTs
     * Combines multiple partially signed Bitcoin transactions into one transaction
     * @param {module:model/RequestsCombinePSBTRequest} body Array of PSBTs to combine
     * @param {module:api/BitcoinApi~combinePsbtCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    combinePsbt(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling combinePsbt");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponsesCombinePSBTResponse;

      return this.apiClient.callApi(
        '/psbt/combine', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the combineRawTransaction operation.
     * @callback moduleapi/BitcoinApi~combineRawTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesCombineRawTransactionResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Combine Raw Transactions
     * Combines multiple partially signed transactions into one transaction
     * @param {module:model/RequestsCombineRawTransactionRequest} body Array of hex-encoded raw transactions
     * @param {module:api/BitcoinApi~combineRawTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    combineRawTransaction(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling combineRawTransaction");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponsesCombineRawTransactionResponse;

      return this.apiClient.callApi(
        '/tx/combine', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the convertToPsbt operation.
     * @callback moduleapi/BitcoinApi~convertToPsbtCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesConvertToPSBTResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert Raw Transaction to PSBT
     * Converts a network serialized transaction to a PSBT. This should be used only with createrawtransaction and fundrawtransaction. createpsbt and walletcreatefundedpsbt should be used for new applications.
     * @param {module:model/RequestsConvertToPSBTRequest} body Raw transaction conversion parameters
     * @param {module:api/BitcoinApi~convertToPsbtCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    convertToPsbt(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling convertToPsbt");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponsesConvertToPSBTResponse;

      return this.apiClient.callApi(
        '/tx/convert-to-psbt', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createPsbt operation.
     * @callback moduleapi/BitcoinApi~createPsbtCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesCreatePSBTResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create PSBT
     * Creates a transaction in the Partially Signed Transaction format. Implements the Creator role.
     * @param {module:model/GithubComSatstreamSsApiServerApiPsbtRequestsCreatePSBTRequest} body Transaction parameters
     * @param {module:api/BitcoinApi~createPsbtCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createPsbt(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPsbt");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponsesCreatePSBTResponse;

      return this.apiClient.callApi(
        '/psbt/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createRawTransaction operation.
     * @callback moduleapi/BitcoinApi~createRawTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesCreateRawTransactionResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Raw Transaction
     * Creates a raw transaction spending the given inputs and creating new outputs. Note that the transaction&#x27;s inputs are not signed, and it is not stored in the wallet or transmitted to the network.
     * @param {module:model/GithubComSatstreamSsApiServerApiTransactionRequestsCreatePSBTRequest} body Transaction parameters
     * @param {module:api/BitcoinApi~createRawTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createRawTransaction(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createRawTransaction");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponsesCreateRawTransactionResponse;

      return this.apiClient.callApi(
        '/tx/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the decodePsbt operation.
     * @callback moduleapi/BitcoinApi~decodePsbtCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesDecodePSBTResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Decode PSBT
     * Return a JSON object representing the serialized, base64-encoded partially signed Bitcoin transaction.
     * @param {module:model/RequestsAnalyzePSBTRequest} body PSBT to decode
     * @param {module:api/BitcoinApi~decodePsbtCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    decodePsbt(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling decodePsbt");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponsesDecodePSBTResponse;

      return this.apiClient.callApi(
        '/psbt/decode', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the decodeScript operation.
     * @callback moduleapi/BitcoinApi~decodeScriptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesDecodeScriptResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Decode Script
     * Decode a hex-encoded script and return detailed information about it.
     * @param {module:model/RequestsDecodeScriptRequest} body Script to decode
     * @param {module:api/BitcoinApi~decodeScriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    decodeScript(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling decodeScript");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponsesDecodeScriptResponse;

      return this.apiClient.callApi(
        '/script/decode', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the estimateRawFee operation.
     * @callback moduleapi/BitcoinApi~estimateRawFeeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesEstimateRawFeeResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Estimate Raw Fee
     * Estimates the approximate fee per kilobyte needed for a transaction to begin confirmation within conf_target blocks if possible.
     * @param {module:model/RequestsEstimateRawFeeRequest} body Fee estimation parameters
     * @param {module:api/BitcoinApi~estimateRawFeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    estimateRawFee(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling estimateRawFee");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponsesEstimateRawFeeResponse;

      return this.apiClient.callApi(
        '/fee/estimate-raw', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the estimateSmartFee operation.
     * @callback moduleapi/BitcoinApi~estimateSmartFeeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesEstimateSmartFeeResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Estimate smart fee
     * Estimates the approximate fee per kilobyte needed for a transaction to begin confirmation within conf_target blocks
     * @param {module:model/RequestsEstimateSmartFeeRequest} body Fee estimation parameters
     * @param {module:api/BitcoinApi~estimateSmartFeeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    estimateSmartFee(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling estimateSmartFee");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponsesEstimateSmartFeeResponse;

      return this.apiClient.callApi(
        '/fee/estimate-smart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBlockByHashDecoded operation.
     * @callback moduleapi/BitcoinApi~getBlockByHashDecodedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesGetBlockDecodedResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get block by hash (verbosity 2)
     * Get block by hash as a decoded object
     * @param {String} hash Block hash
     * @param {module:api/BitcoinApi~getBlockByHashDecodedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBlockByHashDecoded(hash, callback) {
      
      let postBody = null;
      // verify the required parameter 'hash' is set
      if (hash === undefined || hash === null) {
        throw new Error("Missing the required parameter 'hash' when calling getBlockByHashDecoded");
      }

      let pathParams = {
        'hash': hash
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponsesGetBlockDecodedResponse;

      return this.apiClient.callApi(
        '/block/hash/{hash}/decoded', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBlockByHashHex operation.
     * @callback moduleapi/BitcoinApi~getBlockByHashHexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesGetBlockHexResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get block by hash (verbosity 0)
     * Get block by hash as a raw hex string
     * @param {String} hash Block hash
     * @param {module:api/BitcoinApi~getBlockByHashHexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBlockByHashHex(hash, callback) {
      
      let postBody = null;
      // verify the required parameter 'hash' is set
      if (hash === undefined || hash === null) {
        throw new Error("Missing the required parameter 'hash' when calling getBlockByHashHex");
      }

      let pathParams = {
        'hash': hash
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponsesGetBlockHexResponse;

      return this.apiClient.callApi(
        '/block/hash/{hash}/hex', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBlockByHashPrevout operation.
     * @callback moduleapi/BitcoinApi~getBlockByHashPrevoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesGetBlockPrevoutResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get block by hash (verbosity 3)
     * Get block by hash with prevout information
     * @param {String} hash Block hash
     * @param {module:api/BitcoinApi~getBlockByHashPrevoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBlockByHashPrevout(hash, callback) {
      
      let postBody = null;
      // verify the required parameter 'hash' is set
      if (hash === undefined || hash === null) {
        throw new Error("Missing the required parameter 'hash' when calling getBlockByHashPrevout");
      }

      let pathParams = {
        'hash': hash
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponsesGetBlockPrevoutResponse;

      return this.apiClient.callApi(
        '/block/hash/{hash}/prevout', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBlockByHashSummary operation.
     * @callback moduleapi/BitcoinApi~getBlockByHashSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesGetBlockSummaryResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get block by hash (verbosity 1)
     * Get block by hash as a summary object
     * @param {String} hash Block hash
     * @param {module:api/BitcoinApi~getBlockByHashSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBlockByHashSummary(hash, callback) {
      
      let postBody = null;
      // verify the required parameter 'hash' is set
      if (hash === undefined || hash === null) {
        throw new Error("Missing the required parameter 'hash' when calling getBlockByHashSummary");
      }

      let pathParams = {
        'hash': hash
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponsesGetBlockSummaryResponse;

      return this.apiClient.callApi(
        '/block/hash/{hash}/summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBlockByHeightDecoded operation.
     * @callback moduleapi/BitcoinApi~getBlockByHeightDecodedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesGetBlockDecodedResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get block by height (verbosity 2)
     * Get block by height as a decoded object
     * @param {Number} height Block height
     * @param {module:api/BitcoinApi~getBlockByHeightDecodedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBlockByHeightDecoded(height, callback) {
      
      let postBody = null;
      // verify the required parameter 'height' is set
      if (height === undefined || height === null) {
        throw new Error("Missing the required parameter 'height' when calling getBlockByHeightDecoded");
      }

      let pathParams = {
        'height': height
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponsesGetBlockDecodedResponse;

      return this.apiClient.callApi(
        '/block/height/{height}/decoded', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBlockByHeightHex operation.
     * @callback moduleapi/BitcoinApi~getBlockByHeightHexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesGetBlockHexResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get block by height (verbosity 0)
     * Get block by height as a raw hex string
     * @param {Number} height Block height
     * @param {module:api/BitcoinApi~getBlockByHeightHexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBlockByHeightHex(height, callback) {
      
      let postBody = null;
      // verify the required parameter 'height' is set
      if (height === undefined || height === null) {
        throw new Error("Missing the required parameter 'height' when calling getBlockByHeightHex");
      }

      let pathParams = {
        'height': height
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponsesGetBlockHexResponse;

      return this.apiClient.callApi(
        '/block/height/{height}/hex', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBlockByHeightPrevout operation.
     * @callback moduleapi/BitcoinApi~getBlockByHeightPrevoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesGetBlockPrevoutResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get block by height (verbosity 3)
     * Get block by height with prevout information
     * @param {Number} height Block height
     * @param {module:api/BitcoinApi~getBlockByHeightPrevoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBlockByHeightPrevout(height, callback) {
      
      let postBody = null;
      // verify the required parameter 'height' is set
      if (height === undefined || height === null) {
        throw new Error("Missing the required parameter 'height' when calling getBlockByHeightPrevout");
      }

      let pathParams = {
        'height': height
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponsesGetBlockPrevoutResponse;

      return this.apiClient.callApi(
        '/block/height/{height}/prevout', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBlockByHeightSummary operation.
     * @callback moduleapi/BitcoinApi~getBlockByHeightSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesGetBlockSummaryResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get block by height (verbosity 1)
     * Get block by height as a summary object
     * @param {Number} height Block height
     * @param {module:api/BitcoinApi~getBlockByHeightSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBlockByHeightSummary(height, callback) {
      
      let postBody = null;
      // verify the required parameter 'height' is set
      if (height === undefined || height === null) {
        throw new Error("Missing the required parameter 'height' when calling getBlockByHeightSummary");
      }

      let pathParams = {
        'height': height
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponsesGetBlockSummaryResponse;

      return this.apiClient.callApi(
        '/block/height/{height}/summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBlockStats operation.
     * @callback moduleapi/BitcoinApi~getBlockStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesGetBlockStatsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get block stats
     * Computes per block statistics for a given window
     * @param {module:model/RequestsGetBlockStatsRequest} body Block stats request parameters
     * @param {module:api/BitcoinApi~getBlockStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBlockStats(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getBlockStats");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponsesGetBlockStatsResponse;

      return this.apiClient.callApi(
        '/block/stats', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBlockchainInfo operation.
     * @callback moduleapi/BitcoinApi~getBlockchainInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesGetBlockchainInfoResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get blockchain information
     * Returns an object containing various state info regarding blockchain processing
     * @param {module:api/BitcoinApi~getBlockchainInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBlockchainInfo(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponsesGetBlockchainInfoResponse;

      return this.apiClient.callApi(
        '/blockchain/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getChainTxStats operation.
     * @callback moduleapi/BitcoinApi~getChainTxStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesGetChainTxStatsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get chain tx stats
     * Computes statistics about the total number and rate of transactions in the chain
     * @param {module:model/RequestsGetChainTxStatsRequest} body Chain tx stats request parameters
     * @param {module:api/BitcoinApi~getChainTxStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getChainTxStats(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getChainTxStats");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponsesGetChainTxStatsResponse;

      return this.apiClient.callApi(
        '/chain/txstats', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDifficulty operation.
     * @callback moduleapi/BitcoinApi~getDifficultyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesGetDifficultyResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get difficulty
     * Returns the proof-of-work difficulty as a multiple of the minimum difficulty
     * @param {module:api/BitcoinApi~getDifficultyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDifficulty(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponsesGetDifficultyResponse;

      return this.apiClient.callApi(
        '/difficulty', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getMempoolAncestors operation.
     * @callback moduleapi/BitcoinApi~getMempoolAncestorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesGetMempoolAncestorsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get mempool ancestors
     * Returns all in-mempool ancestors for a transaction in the mempool
     * @param {module:model/RequestsGetMempoolAncestorsRequest} body Mempool ancestors request parameters
     * @param {module:api/BitcoinApi~getMempoolAncestorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getMempoolAncestors(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getMempoolAncestors");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponsesGetMempoolAncestorsResponse;

      return this.apiClient.callApi(
        '/mempool/ancestors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getMempoolDescendants operation.
     * @callback moduleapi/BitcoinApi~getMempoolDescendantsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesGetMempoolDescendantsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get mempool descendants
     * Returns all in-mempool descendants for a transaction in the mempool
     * @param {module:model/RequestsGetMempoolDescendantsRequest} body Mempool descendants request parameters
     * @param {module:api/BitcoinApi~getMempoolDescendantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getMempoolDescendants(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getMempoolDescendants");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponsesGetMempoolDescendantsResponse;

      return this.apiClient.callApi(
        '/mempool/descendants', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getMempoolInfo operation.
     * @callback moduleapi/BitcoinApi~getMempoolInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesGetMempoolInfoResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get mempool information
     * Returns details on the active state of the TX memory pool
     * @param {module:api/BitcoinApi~getMempoolInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getMempoolInfo(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponsesGetMempoolInfoResponse;

      return this.apiClient.callApi(
        '/mempool/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getMiningInfo operation.
     * @callback moduleapi/BitcoinApi~getMiningInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesGetMiningInfoResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get mining information
     * Returns a json object containing mining-related information
     * @param {module:api/BitcoinApi~getMiningInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getMiningInfo(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponsesGetMiningInfoResponse;

      return this.apiClient.callApi(
        '/mining/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getNetworkHashps operation.
     * @callback moduleapi/BitcoinApi~getNetworkHashpsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesGetNetworkHashPSResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get network hash per second
     * Returns the estimated network hashes per second based on the last n blocks
     * @param {module:model/RequestsGetNetworkHashPSRequest} body Network hash rate parameters
     * @param {module:api/BitcoinApi~getNetworkHashpsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getNetworkHashps(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getNetworkHashps");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponsesGetNetworkHashPSResponse;

      return this.apiClient.callApi(
        '/network/hashps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getRawMempool operation.
     * @callback moduleapi/BitcoinApi~getRawMempoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesGetRawMempoolResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get raw mempool
     * Returns all transaction ids in memory pool
     * @param {module:model/RequestsGetRawMempoolRequest} body Raw mempool request parameters
     * @param {module:api/BitcoinApi~getRawMempoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getRawMempool(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getRawMempool");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponsesGetRawMempoolResponse;

      return this.apiClient.callApi(
        '/mempool/raw', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getRawTransactionDecoded operation.
     * @callback moduleapi/BitcoinApi~getRawTransactionDecodedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesGetRawTransactionDecodedResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get raw transaction (verbosity 1)
     * Get raw transaction as a decoded object
     * @param {String} txid Transaction ID
     * @param {module:api/BitcoinApi~getRawTransactionDecodedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getRawTransactionDecoded(txid, callback) {
      
      let postBody = null;
      // verify the required parameter 'txid' is set
      if (txid === undefined || txid === null) {
        throw new Error("Missing the required parameter 'txid' when calling getRawTransactionDecoded");
      }

      let pathParams = {
        'txid': txid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponsesGetRawTransactionDecodedResponse;

      return this.apiClient.callApi(
        '/tx/{txid}/decoded', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getRawTransactionHex operation.
     * @callback moduleapi/BitcoinApi~getRawTransactionHexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesGetRawTransactionHexResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get raw transaction (verbosity 0)
     * Get raw transaction as a raw hex string
     * @param {String} txid Transaction ID
     * @param {module:api/BitcoinApi~getRawTransactionHexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getRawTransactionHex(txid, callback) {
      
      let postBody = null;
      // verify the required parameter 'txid' is set
      if (txid === undefined || txid === null) {
        throw new Error("Missing the required parameter 'txid' when calling getRawTransactionHex");
      }

      let pathParams = {
        'txid': txid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponsesGetRawTransactionHexResponse;

      return this.apiClient.callApi(
        '/tx/{txid}/hex', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getRawTransactionPrevout operation.
     * @callback moduleapi/BitcoinApi~getRawTransactionPrevoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesGetRawTransactionPrevoutResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get raw transaction (verbosity 2)
     * Get raw transaction with prevout information
     * @param {String} txid Transaction ID
     * @param {module:api/BitcoinApi~getRawTransactionPrevoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getRawTransactionPrevout(txid, callback) {
      
      let postBody = null;
      // verify the required parameter 'txid' is set
      if (txid === undefined || txid === null) {
        throw new Error("Missing the required parameter 'txid' when calling getRawTransactionPrevout");
      }

      let pathParams = {
        'txid': txid
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponsesGetRawTransactionPrevoutResponse;

      return this.apiClient.callApi(
        '/tx/{txid}/prevout', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTxOut operation.
     * @callback moduleapi/BitcoinApi~getTxOutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesGetTxOutResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get transaction output
     * Returns details about an unspent transaction output
     * @param {module:model/RequestsGetTxOutRequest} body Transaction output request parameters
     * @param {module:api/BitcoinApi~getTxOutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTxOut(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getTxOut");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponsesGetTxOutResponse;

      return this.apiClient.callApi(
        '/tx/out', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTxOutProof operation.
     * @callback moduleapi/BitcoinApi~getTxOutProofCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesGetTxOutProofResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get transaction output proof
     * Returns a hex-encoded proof that one or more specified transactions were included in a block
     * @param {module:model/RequestsGetTxOutProofRequest} body Transaction proof request parameters
     * @param {module:api/BitcoinApi~getTxOutProofCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTxOutProof(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getTxOutProof");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponsesGetTxOutProofResponse;

      return this.apiClient.callApi(
        '/tx/out/proof', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTxOutSetInfo operation.
     * @callback moduleapi/BitcoinApi~getTxOutSetInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesGetTxOutSetInfoResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get transaction output set information
     * Returns statistics about the unspent transaction output set
     * @param {module:model/RequestsGetTxOutSetInfoRequest} body UTXO set info request parameters
     * @param {module:api/BitcoinApi~getTxOutSetInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTxOutSetInfo(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getTxOutSetInfo");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponsesGetTxOutSetInfoResponse;

      return this.apiClient.callApi(
        '/tx/out/set/info', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTxSpendingPrevout operation.
     * @callback moduleapi/BitcoinApi~getTxSpendingPrevoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesGetTxSpendingPrevoutResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get transaction spending prevout
     * Scans the mempool to find transactions spending any of the given outputs
     * @param {module:model/RequestsGetTxSpendingPrevoutRequest} body Transaction spending prevout request
     * @param {module:api/BitcoinApi~getTxSpendingPrevoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTxSpendingPrevout(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getTxSpendingPrevout");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponsesGetTxSpendingPrevoutResponse;

      return this.apiClient.callApi(
        '/tx/spending/prevout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the joinPsbts operation.
     * @callback moduleapi/BitcoinApi~joinPsbtsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesJoinPSBTsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Join PSBTs
     * Joins multiple distinct PSBTs with different inputs and outputs into one PSBT
     * @param {module:model/RequestsJoinPSBTsRequest} body PSBTs to join
     * @param {module:api/BitcoinApi~joinPsbtsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    joinPsbts(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling joinPsbts");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponsesJoinPSBTsResponse;

      return this.apiClient.callApi(
        '/psbt/join', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the sendRawTransaction operation.
     * @callback moduleapi/BitcoinApi~sendRawTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesSendRawTransactionResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send raw transaction
     * Submits a raw transaction to local node and network
     * @param {module:model/RequestsSendRawTransactionRequest} body Raw transaction to send
     * @param {module:api/BitcoinApi~sendRawTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    sendRawTransaction(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling sendRawTransaction");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponsesSendRawTransactionResponse;

      return this.apiClient.callApi(
        '/tx/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the testMempoolAccept operation.
     * @callback moduleapi/BitcoinApi~testMempoolAcceptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesTestMempoolAcceptResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test mempool accept
     * Tests whether raw transactions would be accepted by mempool
     * @param {module:model/RequestsTestMempoolAcceptRequest} body Raw transactions to test
     * @param {module:api/BitcoinApi~testMempoolAcceptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    testMempoolAccept(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling testMempoolAccept");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponsesTestMempoolAcceptResponse;

      return this.apiClient.callApi(
        '/mempool/test-accept', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the validateAddress operation.
     * @callback moduleapi/BitcoinApi~validateAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesValidateAddressResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate address
     * Returns information about the given Bitcoin address
     * @param {String} address Bitcoin address to validate
     * @param {module:api/BitcoinApi~validateAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    validateAddress(address, callback) {
      
      let postBody = null;
      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error("Missing the required parameter 'address' when calling validateAddress");
      }

      let pathParams = {
        'address': address
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResponsesValidateAddressResponse;

      return this.apiClient.callApi(
        '/address/{address}/validate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the verifyMessage operation.
     * @callback moduleapi/BitcoinApi~verifyMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesVerifyMessageResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify message
     * Verifies a signed message
     * @param {module:model/RequestsVerifyMessageRequest} body Message verification parameters
     * @param {module:api/BitcoinApi~verifyMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    verifyMessage(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling verifyMessage");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponsesVerifyMessageResponse;

      return this.apiClient.callApi(
        '/address/verify-message', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the verifyTxOutProof operation.
     * @callback moduleapi/BitcoinApi~verifyTxOutProofCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponsesVerifyTxOutProofResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify transaction output proof
     * Verifies that a proof points to a transaction in a block
     * @param {module:model/RequestsVerifyTxOutProofRequest} body Proof to verify
     * @param {module:api/BitcoinApi~verifyTxOutProofCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    verifyTxOutProof(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling verifyTxOutProof");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponsesVerifyTxOutProofResponse;

      return this.apiClient.callApi(
        '/tx/out/proof/verify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}