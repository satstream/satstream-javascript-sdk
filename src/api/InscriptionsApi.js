/*
 * Satstream API
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.66
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import FetchInscriptionsResponse from '../model/FetchInscriptionsResponse';
import GetBlockInscriptionsResponse from '../model/GetBlockInscriptionsResponse';
import GetInscriptionChildResponse from '../model/GetInscriptionChildResponse';
import GetInscriptionResponse from '../model/GetInscriptionResponse';
import GetLatestInscriptionsResponse from '../model/GetLatestInscriptionsResponse';
import UtilsResponseEnvelope from '../model/UtilsResponseEnvelope';

/**
* Inscriptions service.
* @module api/InscriptionsApi
* @version 1.0.47
*/
export default class InscriptionsApi {

    /**
    * Constructs a new InscriptionsApi. 
    * @alias module:api/InscriptionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the fetchInscriptionChild operation.
     * @callback moduleapi/InscriptionsApi~fetchInscriptionChildCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetInscriptionChildResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get inscription child info
     * Retrieve information about a specific child of an inscription
     * @param {String} inscriptionId Inscription ID
     * @param {Number} childIndex Child Index
     * @param {module:api/InscriptionsApi~fetchInscriptionChildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    fetchInscriptionChild(inscriptionId, childIndex, callback) {
      
      let postBody = null;
      // verify the required parameter 'inscriptionId' is set
      if (inscriptionId === undefined || inscriptionId === null) {
        throw new Error("Missing the required parameter 'inscriptionId' when calling fetchInscriptionChild");
      }
      // verify the required parameter 'childIndex' is set
      if (childIndex === undefined || childIndex === null) {
        throw new Error("Missing the required parameter 'childIndex' when calling fetchInscriptionChild");
      }

      let pathParams = {
        'inscription_id': inscriptionId,'child_index': childIndex
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetInscriptionChildResponse;

      return this.apiClient.callApi(
        '/inscription/{inscription_id}/{child_index}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the fetchInscriptions operation.
     * @callback moduleapi/InscriptionsApi~fetchInscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FetchInscriptionsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch multiple inscriptions
     * Retrieve information about multiple inscriptions
     * @param {Array.<String>} body Inscription IDs
     * @param {module:api/InscriptionsApi~fetchInscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    fetchInscriptions(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling fetchInscriptions");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FetchInscriptionsResponse;

      return this.apiClient.callApi(
        '/inscriptions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBlockInscriptions operation.
     * @callback moduleapi/InscriptionsApi~getBlockInscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBlockInscriptionsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get inscriptions in a specific block
     * Retrieve all inscriptions in a specific block
     * @param {Number} blockHeight Block Height
     * @param {module:api/InscriptionsApi~getBlockInscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBlockInscriptions(blockHeight, callback) {
      
      let postBody = null;
      // verify the required parameter 'blockHeight' is set
      if (blockHeight === undefined || blockHeight === null) {
        throw new Error("Missing the required parameter 'blockHeight' when calling getBlockInscriptions");
      }

      let pathParams = {
        'block_height': blockHeight
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetBlockInscriptionsResponse;

      return this.apiClient.callApi(
        '/inscriptions/block/{block_height}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getBlockInscriptionsPage operation.
     * @callback moduleapi/InscriptionsApi~getBlockInscriptionsPageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBlockInscriptionsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get paginated inscriptions in a specific block
     * Retrieve paginated inscriptions in a specific block
     * @param {Number} blockHeight Block Height
     * @param {Number} page Page Number
     * @param {module:api/InscriptionsApi~getBlockInscriptionsPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getBlockInscriptionsPage(blockHeight, page, callback) {
      
      let postBody = null;
      // verify the required parameter 'blockHeight' is set
      if (blockHeight === undefined || blockHeight === null) {
        throw new Error("Missing the required parameter 'blockHeight' when calling getBlockInscriptionsPage");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling getBlockInscriptionsPage");
      }

      let pathParams = {
        'block_height': blockHeight,'page': page
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetBlockInscriptionsResponse;

      return this.apiClient.callApi(
        '/inscriptions/block/{block_height}/{page}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getInscription operation.
     * @callback moduleapi/InscriptionsApi~getInscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetInscriptionResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get inscription info
     * Get information about a specific inscription
     * @param {String} inscriptionId Inscription ID
     * @param {module:api/InscriptionsApi~getInscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getInscription(inscriptionId, callback) {
      
      let postBody = null;
      // verify the required parameter 'inscriptionId' is set
      if (inscriptionId === undefined || inscriptionId === null) {
        throw new Error("Missing the required parameter 'inscriptionId' when calling getInscription");
      }

      let pathParams = {
        'inscription_id': inscriptionId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetInscriptionResponse;

      return this.apiClient.callApi(
        '/inscription/{inscription_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getLatestInscriptions operation.
     * @callback moduleapi/InscriptionsApi~getLatestInscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLatestInscriptionsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get latest inscriptions
     * Retrieve the latest 100 inscriptions (first page)
     * @param {module:api/InscriptionsApi~getLatestInscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getLatestInscriptions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetLatestInscriptionsResponse;

      return this.apiClient.callApi(
        '/inscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getLatestInscriptionsPage operation.
     * @callback moduleapi/InscriptionsApi~getLatestInscriptionsPageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLatestInscriptionsResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get latest inscriptions page
     * Retrieve a specific page of 100 inscriptions
     * @param {Number} page Page number
     * @param {module:api/InscriptionsApi~getLatestInscriptionsPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getLatestInscriptionsPage(page, callback) {
      
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling getLatestInscriptionsPage");
      }

      let pathParams = {
        'page': page
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetLatestInscriptionsResponse;

      return this.apiClient.callApi(
        '/inscriptions/{page}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}