/*
 * Satstream API
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApiErrorResponse', 'model/BigInt', 'model/InlineResponse200', 'model/ResponsesBaseResponse', 'model/ResponsesBlockRange', 'model/ResponsesGetAddressBalance', 'model/ResponsesGetAddressNonInscriptionUTXOData', 'model/ResponsesGetAddressRuneBalance', 'model/ResponsesGetAddressRunesBalanceListItem', 'model/ResponsesGetAddressTimeframeBalance', 'model/ResponsesGetAddressTimeframeBalanceItem', 'model/ResponsesGetAddressTimeframeBalanceItemBlockRange', 'model/ResponsesNonInscriptionUTXO', 'model/ResponsesSendRawTransaction', 'model/RpcBlock', 'model/RpcBtcTx', 'model/RpcPrevOut', 'model/RpcScriptPubKey', 'model/RpcScriptSig', 'model/RpcUtxoRune', 'model/RpcVin', 'model/RpcVout', 'model/SsApiServerApiRunesResponsesErrorResponse', 'model/SsApiServerApiTransactionsResponsesErrorResponse', 'model/StoreTransactionDocument', 'api/AddressesApi', 'api/BlocksApi', 'api/FeesApi', 'api/MempoolApi', 'api/RunesApi', 'api/TransactionsApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/ApiErrorResponse'), require('./model/BigInt'), require('./model/InlineResponse200'), require('./model/ResponsesBaseResponse'), require('./model/ResponsesBlockRange'), require('./model/ResponsesGetAddressBalance'), require('./model/ResponsesGetAddressNonInscriptionUTXOData'), require('./model/ResponsesGetAddressRuneBalance'), require('./model/ResponsesGetAddressRunesBalanceListItem'), require('./model/ResponsesGetAddressTimeframeBalance'), require('./model/ResponsesGetAddressTimeframeBalanceItem'), require('./model/ResponsesGetAddressTimeframeBalanceItemBlockRange'), require('./model/ResponsesNonInscriptionUTXO'), require('./model/ResponsesSendRawTransaction'), require('./model/RpcBlock'), require('./model/RpcBtcTx'), require('./model/RpcPrevOut'), require('./model/RpcScriptPubKey'), require('./model/RpcScriptSig'), require('./model/RpcUtxoRune'), require('./model/RpcVin'), require('./model/RpcVout'), require('./model/SsApiServerApiRunesResponsesErrorResponse'), require('./model/SsApiServerApiTransactionsResponsesErrorResponse'), require('./model/StoreTransactionDocument'), require('./api/AddressesApi'), require('./api/BlocksApi'), require('./api/FeesApi'), require('./api/MempoolApi'), require('./api/RunesApi'), require('./api/TransactionsApi'));
  }
}(function(ApiClient, ApiErrorResponse, BigInt, InlineResponse200, ResponsesBaseResponse, ResponsesBlockRange, ResponsesGetAddressBalance, ResponsesGetAddressNonInscriptionUTXOData, ResponsesGetAddressRuneBalance, ResponsesGetAddressRunesBalanceListItem, ResponsesGetAddressTimeframeBalance, ResponsesGetAddressTimeframeBalanceItem, ResponsesGetAddressTimeframeBalanceItemBlockRange, ResponsesNonInscriptionUTXO, ResponsesSendRawTransaction, RpcBlock, RpcBtcTx, RpcPrevOut, RpcScriptPubKey, RpcScriptSig, RpcUtxoRune, RpcVin, RpcVout, SsApiServerApiRunesResponsesErrorResponse, SsApiServerApiTransactionsResponsesErrorResponse, StoreTransactionDocument, AddressesApi, BlocksApi, FeesApi, MempoolApi, RunesApi, TransactionsApi) {
  'use strict';

  /**
   * Satstream_API.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var SatstreamApi = require('index'); // See note below*.
   * var xxxSvc = new SatstreamApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new SatstreamApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new SatstreamApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new SatstreamApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The ApiErrorResponse model constructor.
     * @property {module:model/ApiErrorResponse}
     */
    ApiErrorResponse: ApiErrorResponse,
    /**
     * The BigInt model constructor.
     * @property {module:model/BigInt}
     */
    BigInt: BigInt,
    /**
     * The InlineResponse200 model constructor.
     * @property {module:model/InlineResponse200}
     */
    InlineResponse200: InlineResponse200,
    /**
     * The ResponsesBaseResponse model constructor.
     * @property {module:model/ResponsesBaseResponse}
     */
    ResponsesBaseResponse: ResponsesBaseResponse,
    /**
     * The ResponsesBlockRange model constructor.
     * @property {module:model/ResponsesBlockRange}
     */
    ResponsesBlockRange: ResponsesBlockRange,
    /**
     * The ResponsesGetAddressBalance model constructor.
     * @property {module:model/ResponsesGetAddressBalance}
     */
    ResponsesGetAddressBalance: ResponsesGetAddressBalance,
    /**
     * The ResponsesGetAddressNonInscriptionUTXOData model constructor.
     * @property {module:model/ResponsesGetAddressNonInscriptionUTXOData}
     */
    ResponsesGetAddressNonInscriptionUTXOData: ResponsesGetAddressNonInscriptionUTXOData,
    /**
     * The ResponsesGetAddressRuneBalance model constructor.
     * @property {module:model/ResponsesGetAddressRuneBalance}
     */
    ResponsesGetAddressRuneBalance: ResponsesGetAddressRuneBalance,
    /**
     * The ResponsesGetAddressRunesBalanceListItem model constructor.
     * @property {module:model/ResponsesGetAddressRunesBalanceListItem}
     */
    ResponsesGetAddressRunesBalanceListItem: ResponsesGetAddressRunesBalanceListItem,
    /**
     * The ResponsesGetAddressTimeframeBalance model constructor.
     * @property {module:model/ResponsesGetAddressTimeframeBalance}
     */
    ResponsesGetAddressTimeframeBalance: ResponsesGetAddressTimeframeBalance,
    /**
     * The ResponsesGetAddressTimeframeBalanceItem model constructor.
     * @property {module:model/ResponsesGetAddressTimeframeBalanceItem}
     */
    ResponsesGetAddressTimeframeBalanceItem: ResponsesGetAddressTimeframeBalanceItem,
    /**
     * The ResponsesGetAddressTimeframeBalanceItemBlockRange model constructor.
     * @property {module:model/ResponsesGetAddressTimeframeBalanceItemBlockRange}
     */
    ResponsesGetAddressTimeframeBalanceItemBlockRange: ResponsesGetAddressTimeframeBalanceItemBlockRange,
    /**
     * The ResponsesNonInscriptionUTXO model constructor.
     * @property {module:model/ResponsesNonInscriptionUTXO}
     */
    ResponsesNonInscriptionUTXO: ResponsesNonInscriptionUTXO,
    /**
     * The ResponsesSendRawTransaction model constructor.
     * @property {module:model/ResponsesSendRawTransaction}
     */
    ResponsesSendRawTransaction: ResponsesSendRawTransaction,
    /**
     * The RpcBlock model constructor.
     * @property {module:model/RpcBlock}
     */
    RpcBlock: RpcBlock,
    /**
     * The RpcBtcTx model constructor.
     * @property {module:model/RpcBtcTx}
     */
    RpcBtcTx: RpcBtcTx,
    /**
     * The RpcPrevOut model constructor.
     * @property {module:model/RpcPrevOut}
     */
    RpcPrevOut: RpcPrevOut,
    /**
     * The RpcScriptPubKey model constructor.
     * @property {module:model/RpcScriptPubKey}
     */
    RpcScriptPubKey: RpcScriptPubKey,
    /**
     * The RpcScriptSig model constructor.
     * @property {module:model/RpcScriptSig}
     */
    RpcScriptSig: RpcScriptSig,
    /**
     * The RpcUtxoRune model constructor.
     * @property {module:model/RpcUtxoRune}
     */
    RpcUtxoRune: RpcUtxoRune,
    /**
     * The RpcVin model constructor.
     * @property {module:model/RpcVin}
     */
    RpcVin: RpcVin,
    /**
     * The RpcVout model constructor.
     * @property {module:model/RpcVout}
     */
    RpcVout: RpcVout,
    /**
     * The SsApiServerApiRunesResponsesErrorResponse model constructor.
     * @property {module:model/SsApiServerApiRunesResponsesErrorResponse}
     */
    SsApiServerApiRunesResponsesErrorResponse: SsApiServerApiRunesResponsesErrorResponse,
    /**
     * The SsApiServerApiTransactionsResponsesErrorResponse model constructor.
     * @property {module:model/SsApiServerApiTransactionsResponsesErrorResponse}
     */
    SsApiServerApiTransactionsResponsesErrorResponse: SsApiServerApiTransactionsResponsesErrorResponse,
    /**
     * The StoreTransactionDocument model constructor.
     * @property {module:model/StoreTransactionDocument}
     */
    StoreTransactionDocument: StoreTransactionDocument,
    /**
     * The AddressesApi service constructor.
     * @property {module:api/AddressesApi}
     */
    AddressesApi: AddressesApi,
    /**
     * The BlocksApi service constructor.
     * @property {module:api/BlocksApi}
     */
    BlocksApi: BlocksApi,
    /**
     * The FeesApi service constructor.
     * @property {module:api/FeesApi}
     */
    FeesApi: FeesApi,
    /**
     * The MempoolApi service constructor.
     * @property {module:api/MempoolApi}
     */
    MempoolApi: MempoolApi,
    /**
     * The RunesApi service constructor.
     * @property {module:api/RunesApi}
     */
    RunesApi: RunesApi,
    /**
     * The TransactionsApi service constructor.
     * @property {module:api/TransactionsApi}
     */
    TransactionsApi: TransactionsApi
  };

  return exports;
}));
