/*
 * Satstream API
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GithubComSatstreamSsUtilsRpcBtcTx'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./GithubComSatstreamSsUtilsRpcBtcTx'));
  } else {
    // Browser globals (root is window)
    if (!root.SatstreamApi) {
      root.SatstreamApi = {};
    }
    root.SatstreamApi.GithubComSatstreamSsUtilsRpcBlock = factory(root.SatstreamApi.ApiClient, root.SatstreamApi.GithubComSatstreamSsUtilsRpcBtcTx);
  }
}(this, function(ApiClient, GithubComSatstreamSsUtilsRpcBtcTx) {
  'use strict';

  /**
   * The GithubComSatstreamSsUtilsRpcBlock model module.
   * @module model/GithubComSatstreamSsUtilsRpcBlock
   * @version 1.0
   */

  /**
   * Constructs a new <code>GithubComSatstreamSsUtilsRpcBlock</code>.
   * @alias module:model/GithubComSatstreamSsUtilsRpcBlock
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>GithubComSatstreamSsUtilsRpcBlock</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/GithubComSatstreamSsUtilsRpcBlock} obj Optional instance to populate.
   * @return {module:model/GithubComSatstreamSsUtilsRpcBlock} The populated <code>GithubComSatstreamSsUtilsRpcBlock</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('bits'))
        obj.bits = ApiClient.convertToType(data['bits'], 'String');
      if (data.hasOwnProperty('chainwork'))
        obj.chainwork = ApiClient.convertToType(data['chainwork'], 'String');
      if (data.hasOwnProperty('confirmations'))
        obj.confirmations = ApiClient.convertToType(data['confirmations'], 'Number');
      if (data.hasOwnProperty('difficulty'))
        obj.difficulty = ApiClient.convertToType(data['difficulty'], 'Number');
      if (data.hasOwnProperty('hash'))
        obj.hash = ApiClient.convertToType(data['hash'], 'String');
      if (data.hasOwnProperty('height'))
        obj.height = ApiClient.convertToType(data['height'], 'Number');
      if (data.hasOwnProperty('mediantime'))
        obj.mediantime = ApiClient.convertToType(data['mediantime'], 'Number');
      if (data.hasOwnProperty('merkleroot'))
        obj.merkleroot = ApiClient.convertToType(data['merkleroot'], 'String');
      if (data.hasOwnProperty('nTx'))
        obj.nTx = ApiClient.convertToType(data['nTx'], 'Number');
      if (data.hasOwnProperty('nonce'))
        obj.nonce = ApiClient.convertToType(data['nonce'], 'Number');
      if (data.hasOwnProperty('previousblockhash'))
        obj.previousblockhash = ApiClient.convertToType(data['previousblockhash'], 'String');
      if (data.hasOwnProperty('size'))
        obj.size = ApiClient.convertToType(data['size'], 'Number');
      if (data.hasOwnProperty('strippedSize'))
        obj.strippedSize = ApiClient.convertToType(data['strippedSize'], 'Number');
      if (data.hasOwnProperty('time'))
        obj.time = ApiClient.convertToType(data['time'], 'Number');
      if (data.hasOwnProperty('tx'))
        obj.tx = ApiClient.convertToType(data['tx'], [GithubComSatstreamSsUtilsRpcBtcTx]);
      if (data.hasOwnProperty('version'))
        obj.version = ApiClient.convertToType(data['version'], 'Number');
      if (data.hasOwnProperty('versionHex'))
        obj.versionHex = ApiClient.convertToType(data['versionHex'], 'String');
      if (data.hasOwnProperty('weight'))
        obj.weight = ApiClient.convertToType(data['weight'], 'Number');
    }
    return obj;
  }

  /**
   * @member {String} bits
   */
  exports.prototype.bits = undefined;

  /**
   * @member {String} chainwork
   */
  exports.prototype.chainwork = undefined;

  /**
   * @member {Number} confirmations
   */
  exports.prototype.confirmations = undefined;

  /**
   * @member {Number} difficulty
   */
  exports.prototype.difficulty = undefined;

  /**
   * @member {String} hash
   */
  exports.prototype.hash = undefined;

  /**
   * @member {Number} height
   */
  exports.prototype.height = undefined;

  /**
   * @member {Number} mediantime
   */
  exports.prototype.mediantime = undefined;

  /**
   * @member {String} merkleroot
   */
  exports.prototype.merkleroot = undefined;

  /**
   * @member {Number} nTx
   */
  exports.prototype.nTx = undefined;

  /**
   * @member {Number} nonce
   */
  exports.prototype.nonce = undefined;

  /**
   * @member {String} previousblockhash
   */
  exports.prototype.previousblockhash = undefined;

  /**
   * @member {Number} size
   */
  exports.prototype.size = undefined;

  /**
   * @member {Number} strippedSize
   */
  exports.prototype.strippedSize = undefined;

  /**
   * @member {Number} time
   */
  exports.prototype.time = undefined;

  /**
   * Txns will be stored in a separate collection in the DB
   * @member {Array.<module:model/GithubComSatstreamSsUtilsRpcBtcTx>} tx
   */
  exports.prototype.tx = undefined;

  /**
   * @member {Number} version
   */
  exports.prototype.version = undefined;

  /**
   * @member {String} versionHex
   */
  exports.prototype.versionHex = undefined;

  /**
   * @member {Number} weight
   */
  exports.prototype.weight = undefined;


  return exports;

}));
