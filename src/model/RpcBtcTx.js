/*
 * Satstream API
 * Satstream API
 *
 * OpenAPI spec version: 1.0
 * Contact: team@satstream.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/RpcVin', 'model/RpcVout'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./RpcVin'), require('./RpcVout'));
  } else {
    // Browser globals (root is window)
    if (!root.SatstreamApi) {
      root.SatstreamApi = {};
    }
    root.SatstreamApi.RpcBtcTx = factory(root.SatstreamApi.ApiClient, root.SatstreamApi.RpcVin, root.SatstreamApi.RpcVout);
  }
}(this, function(ApiClient, RpcVin, RpcVout) {
  'use strict';

  /**
   * The RpcBtcTx model module.
   * @module model/RpcBtcTx
   * @version 1.0
   */

  /**
   * Constructs a new <code>RpcBtcTx</code>.
   * @alias module:model/RpcBtcTx
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>RpcBtcTx</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/RpcBtcTx} obj Optional instance to populate.
   * @return {module:model/RpcBtcTx} The populated <code>RpcBtcTx</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('blockheight'))
        obj.blockheight = ApiClient.convertToType(data['blockheight'], 'Number');
      if (data.hasOwnProperty('fee'))
        obj.fee = ApiClient.convertToType(data['fee'], 'Number');
      if (data.hasOwnProperty('hash'))
        obj.hash = ApiClient.convertToType(data['hash'], 'String');
      if (data.hasOwnProperty('hex'))
        obj.hex = ApiClient.convertToType(data['hex'], 'String');
      if (data.hasOwnProperty('index'))
        obj.index = ApiClient.convertToType(data['index'], 'Number');
      if (data.hasOwnProperty('locktime'))
        obj.locktime = ApiClient.convertToType(data['locktime'], 'Number');
      if (data.hasOwnProperty('size'))
        obj.size = ApiClient.convertToType(data['size'], 'Number');
      if (data.hasOwnProperty('txid'))
        obj.txid = ApiClient.convertToType(data['txid'], 'String');
      if (data.hasOwnProperty('version'))
        obj.version = ApiClient.convertToType(data['version'], 'Number');
      if (data.hasOwnProperty('vin'))
        obj.vin = ApiClient.convertToType(data['vin'], [RpcVin]);
      if (data.hasOwnProperty('vout'))
        obj.vout = ApiClient.convertToType(data['vout'], [RpcVout]);
      if (data.hasOwnProperty('vsize'))
        obj.vsize = ApiClient.convertToType(data['vsize'], 'Number');
      if (data.hasOwnProperty('weight'))
        obj.weight = ApiClient.convertToType(data['weight'], 'Number');
    }
    return obj;
  }

  /**
   * @member {Number} blockheight
   */
  exports.prototype.blockheight = undefined;

  /**
   * @member {Number} fee
   */
  exports.prototype.fee = undefined;

  /**
   * @member {String} hash
   */
  exports.prototype.hash = undefined;

  /**
   * @member {String} hex
   */
  exports.prototype.hex = undefined;

  /**
   * @member {Number} index
   */
  exports.prototype.index = undefined;

  /**
   * @member {Number} locktime
   */
  exports.prototype.locktime = undefined;

  /**
   * @member {Number} size
   */
  exports.prototype.size = undefined;

  /**
   * @member {String} txid
   */
  exports.prototype.txid = undefined;

  /**
   * @member {Number} version
   */
  exports.prototype.version = undefined;

  /**
   * Vin will be stored in a separate collection in the DB
   * @member {Array.<module:model/RpcVin>} vin
   */
  exports.prototype.vin = undefined;

  /**
   * Vout will be stored in a separate collection in the DB
   * @member {Array.<module:model/RpcVout>} vout
   */
  exports.prototype.vout = undefined;

  /**
   * @member {Number} vsize
   */
  exports.prototype.vsize = undefined;

  /**
   * @member {Number} weight
   */
  exports.prototype.weight = undefined;


  return exports;

}));
